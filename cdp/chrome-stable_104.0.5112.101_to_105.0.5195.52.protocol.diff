--- ./cdp/chrome-stable_104.0.5112.101.protocol.json	2023-01-06 17:20:11.614166850 +0000
+++ ./cdp/chrome-stable_105.0.5195.52.protocol.json	2023-01-06 17:20:33.154283514 +0000
@@ -282,6 +282,12 @@
               "$ref": "AXValue"
             },
             {
+              "name": "chromeRole",
+              "description": "This `Node`'s Chrome raw role.",
+              "optional": true,
+              "$ref": "AXValue"
+            },
+            {
               "name": "name",
               "description": "The accessible name for this `Node`.",
               "optional": true,
@@ -1560,6 +1566,7 @@
             "DeprecationExample",
             "DocumentDomainSettingWithoutOriginAgentClusterHeader",
             "EventPath",
+            "ExpectCTHeader",
             "GeolocationInsecureOrigin",
             "GeolocationInsecureOriginDeprecatedNotRemoved",
             "GetUserMediaInsecureOrigin",
@@ -1570,11 +1577,14 @@
             "LocalCSSFileExtensionRejected",
             "MediaSourceAbortRemove",
             "MediaSourceDurationTruncatingBuffered",
+            "NavigateEventRestoreScroll",
+            "NavigateEventTransitionWhile",
             "NoSysexWebMIDIWithoutPermission",
             "NotificationInsecureOrigin",
             "NotificationPermissionRequestedIframe",
             "ObsoleteWebRtcCipherSuite",
             "OpenWebDatabaseInsecureContext",
+            "OverflowVisibleOnReplacedElement",
             "PictureSourceSrc",
             "PrefixedCancelAnimationFrame",
             "PrefixedRequestAnimationFrame",
@@ -2958,6 +2968,16 @@
               "items": {
                 "$ref": "CSSLayer"
               }
+            },
+            {
+              "name": "scopes",
+              "description": "@scope CSS at-rule array.\nThe array enumerates @scope at-rules starting with the innermost one, going outwards.",
+              "experimental": true,
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "CSSScope"
+              }
             }
           ]
         },
@@ -3313,6 +3333,31 @@
           ]
         },
         {
+          "id": "CSSScope",
+          "description": "CSS Scope at-rule descriptor.",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "text",
+              "description": "Scope rule text.",
+              "type": "string"
+            },
+            {
+              "name": "range",
+              "description": "The associated rule header range in the enclosing stylesheet (if\navailable).",
+              "optional": true,
+              "$ref": "SourceRange"
+            },
+            {
+              "name": "styleSheetId",
+              "description": "Identifier of the stylesheet containing this object (if exists).",
+              "optional": true,
+              "$ref": "StyleSheetId"
+            }
+          ]
+        },
+        {
           "id": "CSSLayer",
           "description": "CSS Layer at-rule descriptor.",
           "experimental": true,
@@ -3787,6 +3832,13 @@
               "items": {
                 "$ref": "CSSKeyframesRule"
               }
+            },
+            {
+              "name": "parentLayoutNodeId",
+              "description": "Id of the first parent element that does not have display: contents.",
+              "experimental": true,
+              "optional": true,
+              "$ref": "DOM.NodeId"
             }
           ]
         },
@@ -4008,6 +4060,32 @@
           ]
         },
         {
+          "name": "setScopeText",
+          "description": "Modifies the expression of a scope at-rule.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "styleSheetId",
+              "$ref": "StyleSheetId"
+            },
+            {
+              "name": "range",
+              "$ref": "SourceRange"
+            },
+            {
+              "name": "text",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "scope",
+              "description": "The resulting CSS Scope rule after modification.",
+              "$ref": "CSSScope"
+            }
+          ]
+        },
+        {
           "name": "setRuleSelector",
           "description": "Modifies the rule selector.",
           "parameters": [
@@ -5639,6 +5717,21 @@
           ]
         },
         {
+          "name": "getTopLayerElements",
+          "description": "Returns NodeIds of current top layer elements.\nTop layer is rendered closest to the user within a viewport, therefore its elements always\nappear on top of all other content.",
+          "experimental": true,
+          "returns": [
+            {
+              "name": "nodeIds",
+              "description": "NodeIds of top layer elements",
+              "type": "array",
+              "items": {
+                "$ref": "NodeId"
+              }
+            }
+          ]
+        },
+        {
           "name": "redo",
           "description": "Re-does the last undone action.",
           "experimental": true
@@ -6180,6 +6273,11 @@
           ]
         },
         {
+          "name": "topLayerElementsUpdated",
+          "description": "Called when top layer elements are changed.",
+          "experimental": true
+        },
+        {
           "name": "pseudoElementRemoved",
           "description": "Called when a pseudo element is removed from an element.",
           "experimental": true,
@@ -10586,6 +10684,7 @@
             "TextTrack",
             "XHR",
             "Fetch",
+            "Prefetch",
             "EventSource",
             "WebSocket",
             "Manifest",
@@ -11042,6 +11141,17 @@
               "name": "certificateTransparencyCompliance",
               "description": "Whether the request complied with Certificate Transparency policy",
               "$ref": "CertificateTransparencyCompliance"
+            },
+            {
+              "name": "serverSignatureAlgorithm",
+              "description": "The signature algorithm used by the server in the TLS server signature,\nrepresented as a TLS SignatureScheme code point. Omitted if not\napplicable or not known.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "encryptedClientHello",
+              "description": "Whether the connection used Encrypted ClientHello",
+              "type": "boolean"
             }
           ]
         },
@@ -15082,6 +15192,7 @@
             "encrypted-media",
             "execution-while-out-of-viewport",
             "execution-while-not-rendered",
+            "federated-credentials",
             "focus-without-user-activation",
             "fullscreen",
             "frobulate",
@@ -15105,6 +15216,7 @@
             "screen-wake-lock",
             "serial",
             "shared-autofill",
+            "shared-storage",
             "storage-access-api",
             "sync-xhr",
             "trust-token-redemption",
@@ -15123,7 +15235,8 @@
           "enum": [
             "Header",
             "IframeAttribute",
-            "InFencedFrameTree"
+            "InFencedFrameTree",
+            "InIsolatedApp"
           ]
         },
         {
@@ -17341,12 +17454,6 @@
               "$ref": "FrameId"
             },
             {
-              "name": "backendNodeId",
-              "description": "Input node id.",
-              "experimental": true,
-              "$ref": "DOM.BackendNodeId"
-            },
-            {
               "name": "mode",
               "description": "Input mode.",
               "type": "string",
@@ -17354,6 +17461,13 @@
                 "selectSingle",
                 "selectMultiple"
               ]
+            },
+            {
+              "name": "backendNodeId",
+              "description": "Input node id. Only present for file choosers opened via an <input type=\"file\"> element.",
+              "experimental": true,
+              "optional": true,
+              "$ref": "DOM.BackendNodeId"
             }
           ]
         },
@@ -19009,6 +19123,22 @@
           ]
         },
         {
+          "name": "clearDataForStorageKey",
+          "description": "Clears storage for storage key.",
+          "parameters": [
+            {
+              "name": "storageKey",
+              "description": "Storage key.",
+              "type": "string"
+            },
+            {
+              "name": "storageTypes",
+              "description": "Comma separated list of StorageType to clear.",
+              "type": "string"
+            }
+          ]
+        },
+        {
           "name": "getCookies",
           "description": "Returns all browser cookies.",
           "parameters": [
@@ -20219,6 +20349,12 @@
               ]
             },
             {
+              "name": "traceBufferSizeInKb",
+              "description": "Size of the trace buffer in kilobytes. If not specified or zero is passed, a default value\nof 200 MB would be used.",
+              "optional": true,
+              "type": "number"
+            },
+            {
               "name": "enableSampling",
               "description": "Turns on JavaScript stack sampling.",
               "optional": true,
@@ -22243,6 +22379,29 @@
           ]
         },
         {
+          "id": "WasmDisassemblyChunk",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "lines",
+              "description": "The next chunk of disassembled lines.",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
+              "name": "bytecodeOffsets",
+              "description": "The bytecode offsets describing the start of each line.",
+              "type": "array",
+              "items": {
+                "type": "integer"
+              }
+            }
+          ]
+        },
+        {
           "id": "ScriptLanguage",
           "description": "Enum of possible script languages.",
           "type": "string",
@@ -22453,6 +22612,61 @@
           ]
         },
         {
+          "name": "disassembleWasmModule",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "scriptId",
+              "description": "Id of the script to disassemble",
+              "$ref": "Runtime.ScriptId"
+            }
+          ],
+          "returns": [
+            {
+              "name": "streamId",
+              "description": "For large modules, return a stream from which additional chunks of\ndisassembly can be read successively.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "totalNumberOfLines",
+              "description": "The total number of lines in the disassembly text.",
+              "type": "integer"
+            },
+            {
+              "name": "functionBodyOffsets",
+              "description": "The offsets of all function bodies plus one additional entry pointing\none by past the end of the last function.",
+              "type": "array",
+              "items": {
+                "type": "integer"
+              }
+            },
+            {
+              "name": "chunk",
+              "description": "The first chunk of disassembly.",
+              "$ref": "WasmDisassemblyChunk"
+            }
+          ]
+        },
+        {
+          "name": "nextWasmDisassemblyChunk",
+          "description": "Disassemble the next chunk of lines for the module corresponding to the\nstream. If disassembly is complete, this API will invalidate the streamId\nand return an empty chunk. Any subsequent calls for the now invalid stream\nwill return errors.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "streamId",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "chunk",
+              "description": "The next chunk of disassembly.",
+              "$ref": "WasmDisassemblyChunk"
+            }
+          ]
+        },
+        {
           "name": "getWasmBytecode",
           "description": "This command is deprecated. Use getScriptSource instead.",
           "deprecated": true,
@@ -22828,7 +23042,7 @@
         },
         {
           "name": "setScriptSource",
-          "description": "Edits JavaScript source live.",
+          "description": "Edits JavaScript source live.\n\nIn general, functions that are currently on the stack can not be edited with\na single exception: If the edited function is the top-most stack frame and\nthat is the only activation of that function on the stack. In this case\nthe live edit will be successful and a `Debugger.restartFrame` for the\ntop-most function is automatically triggered.",
           "parameters": [
             {
               "name": "scriptId",
@@ -22845,12 +23059,20 @@
               "description": "If true the change will not actually be applied. Dry run may be used to get result\ndescription without actually modifying the code.",
               "optional": true,
               "type": "boolean"
+            },
+            {
+              "name": "allowTopFrameEditing",
+              "description": "If true, then `scriptSource` is allowed to change the function on top of the stack\nas long as the top-most stack frame is the only activation of that function.",
+              "experimental": true,
+              "optional": true,
+              "type": "boolean"
             }
           ],
           "returns": [
             {
               "name": "callFrames",
               "description": "New stack trace in case editing has happened while VM was stopped.",
+              "deprecated": true,
               "optional": true,
               "type": "array",
               "items": {
@@ -22860,25 +23082,39 @@
             {
               "name": "stackChanged",
               "description": "Whether current call stack  was modified after applying the changes.",
+              "deprecated": true,
               "optional": true,
               "type": "boolean"
             },
             {
               "name": "asyncStackTrace",
               "description": "Async stack trace, if any.",
+              "deprecated": true,
               "optional": true,
               "$ref": "Runtime.StackTrace"
             },
             {
               "name": "asyncStackTraceId",
               "description": "Async stack trace, if any.",
-              "experimental": true,
+              "deprecated": true,
               "optional": true,
               "$ref": "Runtime.StackTraceId"
             },
             {
+              "name": "status",
+              "description": "Whether the operation was successful or not. Only `Ok` denotes a\nsuccessful live edit while the other enum variants denote why\nthe live edit failed.",
+              "experimental": true,
+              "type": "string",
+              "enum": [
+                "Ok",
+                "CompileError",
+                "BlockedByActiveGenerator",
+                "BlockedByActiveFunction"
+              ]
+            },
+            {
               "name": "exceptionDetails",
-              "description": "Exception details if any.",
+              "description": "Exception details if any. Only present when `status` is `CompileError`.",
               "optional": true,
               "$ref": "Runtime.ExceptionDetails"
             }
