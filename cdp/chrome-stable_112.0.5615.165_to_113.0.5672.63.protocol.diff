--- ./cdp/chrome-stable_112.0.5615.165.protocol.json	2023-05-03 01:02:04.348035923 +0000
+++ ./cdp/chrome-stable_113.0.5672.63.protocol.json	2023-05-03 01:02:54.540775583 +0000
@@ -1449,7 +1449,6 @@
           "type": "string",
           "enum": [
             "PermissionPolicyDisabled",
-            "PermissionPolicyNotDelegated",
             "UntrustworthyReportingOrigin",
             "InsecureContext",
             "InvalidHeader",
@@ -1458,7 +1457,12 @@
             "TooManyConcurrentRequests",
             "SourceAndTriggerHeaders",
             "SourceIgnored",
-            "TriggerIgnored"
+            "TriggerIgnored",
+            "OsSourceIgnored",
+            "OsTriggerIgnored",
+            "InvalidRegisterOsSourceHeader",
+            "InvalidRegisterOsTriggerHeader",
+            "WebAndOsHeaders"
           ]
         },
         {
@@ -1544,7 +1548,7 @@
             "FormInputAssignedAutocompleteValueToIdOrNameAttributeError",
             "FormLabelHasNeitherForNorNestedInput",
             "FormLabelForMatchesNonExistingIdError",
-            "FormHasPasswordFieldWithoutUsernameFieldError"
+            "FormInputHasWrongButWellIntendedAutocompleteValueError"
           ]
         },
         {
@@ -2892,6 +2896,16 @@
               "$ref": "SelectorList"
             },
             {
+              "name": "nestingSelectors",
+              "description": "Array of selectors from ancestor style rules, sorted by distance from the current rule.",
+              "experimental": true,
+              "optional": true,
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
               "name": "origin",
               "description": "Parent stylesheet's origin.",
               "$ref": "StyleSheetOrigin"
@@ -16374,82 +16388,6 @@
               }
             }
           ]
-        },
-        {
-          "id": "PrerenderFinalStatus",
-          "description": "List of FinalStatus reasons for Prerender2.",
-          "type": "string",
-          "enum": [
-            "Activated",
-            "Destroyed",
-            "LowEndDevice",
-            "InvalidSchemeRedirect",
-            "InvalidSchemeNavigation",
-            "InProgressNavigation",
-            "NavigationRequestBlockedByCsp",
-            "MainFrameNavigation",
-            "MojoBinderPolicy",
-            "RendererProcessCrashed",
-            "RendererProcessKilled",
-            "Download",
-            "TriggerDestroyed",
-            "NavigationNotCommitted",
-            "NavigationBadHttpStatus",
-            "ClientCertRequested",
-            "NavigationRequestNetworkError",
-            "MaxNumOfRunningPrerendersExceeded",
-            "CancelAllHostsForTesting",
-            "DidFailLoad",
-            "Stop",
-            "SslCertificateError",
-            "LoginAuthRequested",
-            "UaChangeRequiresReload",
-            "BlockedByClient",
-            "AudioOutputDeviceRequested",
-            "MixedContent",
-            "TriggerBackgrounded",
-            "EmbedderTriggeredAndCrossOriginRedirected",
-            "MemoryLimitExceeded",
-            "FailToGetMemoryUsage",
-            "DataSaverEnabled",
-            "HasEffectiveUrl",
-            "ActivatedBeforeStarted",
-            "InactivePageRestriction",
-            "StartFailed",
-            "TimeoutBackgrounded",
-            "CrossSiteRedirect",
-            "CrossSiteNavigation",
-            "SameSiteCrossOriginRedirect",
-            "SameSiteCrossOriginNavigation",
-            "SameSiteCrossOriginRedirectNotOptIn",
-            "SameSiteCrossOriginNavigationNotOptIn",
-            "ActivationNavigationParameterMismatch",
-            "ActivatedInBackground",
-            "EmbedderHostDisallowed",
-            "ActivationNavigationDestroyedBeforeSuccess",
-            "TabClosedByUserGesture",
-            "TabClosedWithoutUserGesture",
-            "PrimaryMainFrameRendererProcessCrashed",
-            "PrimaryMainFrameRendererProcessKilled",
-            "ActivationFramePolicyNotCompatible",
-            "PreloadingDisabled",
-            "BatterySaverEnabled",
-            "ActivatedDuringMainFrameNavigation",
-            "PreloadingUnsupportedByWebContents"
-          ]
-        },
-        {
-          "id": "PreloadingStatus",
-          "description": "Preloading status values, see also PreloadingTriggeringOutcome. This\nstatus is shared by prefetchStatusUpdated and prerenderStatusUpdated.",
-          "type": "string",
-          "enum": [
-            "Pending",
-            "Running",
-            "Ready",
-            "Success",
-            "Failure",
-            "NotSupported"
-          ]
         }
       ],
       "commands": [
@@ -18025,72 +17963,6 @@
           ]
         },
         {
-          "name": "prerenderAttemptCompleted",
-          "description": "Fired when a prerender attempt is completed.",
-          "experimental": true,
-          "parameters": [
-            {
-              "name": "initiatingFrameId",
-              "description": "The frame id of the frame initiating prerendering.",
-              "$ref": "FrameId"
-            },
-            {
-              "name": "prerenderingUrl",
-              "type": "string"
-            },
-            {
-              "name": "finalStatus",
-              "$ref": "PrerenderFinalStatus"
-            },
-            {
-              "name": "disallowedApiMethod",
-              "description": "This is used to give users more information about the name of the API call\nthat is incompatible with prerender and has caused the cancellation of the attempt",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "prefetchStatusUpdated",
-          "description": "TODO(crbug/1384419): Create a dedicated domain for preloading.\nFired when a prefetch attempt is updated.",
-          "experimental": true,
-          "parameters": [
-            {
-              "name": "initiatingFrameId",
-              "description": "The frame id of the frame initiating prefetch.",
-              "$ref": "FrameId"
-            },
-            {
-              "name": "prefetchUrl",
-              "type": "string"
-            },
-            {
-              "name": "status",
-              "$ref": "PreloadingStatus"
-            }
-          ]
-        },
-        {
-          "name": "prerenderStatusUpdated",
-          "description": "TODO(crbug/1384419): Create a dedicated domain for preloading.\nFired when a prerender attempt is updated.",
-          "experimental": true,
-          "parameters": [
-            {
-              "name": "initiatingFrameId",
-              "description": "The frame id of the frame initiating prerender.",
-              "$ref": "FrameId"
-            },
-            {
-              "name": "prerenderingUrl",
-              "type": "string"
-            },
-            {
-              "name": "status",
-              "$ref": "PreloadingStatus"
-            }
-          ]
-        },
-        {
           "name": "loadEventFired",
           "parameters": [
             {
@@ -19212,6 +19084,7 @@
             "cache_storage",
             "interest_groups",
             "shared_storage",
+            "storage_buckets",
             "all",
             "other"
           ]
@@ -19490,6 +19363,53 @@
               "type": "boolean"
             }
           ]
+        },
+        {
+          "id": "StorageBucketsDurability",
+          "type": "string",
+          "enum": [
+            "relaxed",
+            "strict"
+          ]
+        },
+        {
+          "id": "StorageBucketInfo",
+          "type": "object",
+          "properties": [
+            {
+              "name": "storageKey",
+              "$ref": "SerializedStorageKey"
+            },
+            {
+              "name": "id",
+              "type": "string"
+            },
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "isDefault",
+              "type": "boolean"
+            },
+            {
+              "name": "expiration",
+              "$ref": "Network.TimeSinceEpoch"
+            },
+            {
+              "name": "quota",
+              "description": "Storage quota (bytes).",
+              "type": "number"
+            },
+            {
+              "name": "persistent",
+              "type": "boolean"
+            },
+            {
+              "name": "durability",
+              "$ref": "StorageBucketsDurability"
+            }
+          ]
         }
       ],
       "commands": [
@@ -19910,6 +19830,36 @@
               "type": "boolean"
             }
           ]
+        },
+        {
+          "name": "setStorageBucketTracking",
+          "description": "Set tracking for a storage key's buckets.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "storageKey",
+              "type": "string"
+            },
+            {
+              "name": "enable",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "deleteStorageBucket",
+          "description": "Deletes the Storage Bucket with the given storage key and bucket name.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "storageKey",
+              "type": "string"
+            },
+            {
+              "name": "bucketName",
+              "type": "string"
+            }
+          ]
         }
       ],
       "events": [
@@ -20044,6 +19994,24 @@
               "$ref": "SharedStorageAccessParams"
             }
           ]
+        },
+        {
+          "name": "storageBucketCreatedOrUpdated",
+          "parameters": [
+            {
+              "name": "bucket",
+              "$ref": "StorageBucketInfo"
+            }
+          ]
+        },
+        {
+          "name": "storageBucketDeleted",
+          "parameters": [
+            {
+              "name": "bucketId",
+              "type": "string"
+            }
+          ]
         }
       ]
     },
@@ -22930,8 +22898,174 @@
               "name": "sourceText",
               "description": "Source text of JSON representing the rule set. If it comes from\n<script> tag, it is the textContent of the node. Note that it is\na JSON for valid case.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html\n- https://github.com/WICG/nav-speculation/blob/main/triggers.md",
               "type": "string"
+            },
+            {
+              "name": "errorType",
+              "description": "Error information\n`errorMessage` is null iff `errorType` is null.",
+              "optional": true,
+              "$ref": "RuleSetErrorType"
+            },
+            {
+              "name": "errorMessage",
+              "description": "TODO(https://crbug.com/1425354): Replace this property with structured error.",
+              "deprecated": true,
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "RuleSetErrorType",
+          "type": "string",
+          "enum": [
+            "SourceIsNotJsonObject",
+            "InvalidRulesSkipped"
+          ]
+        },
+        {
+          "id": "SpeculationAction",
+          "description": "The type of preloading attempted. It corresponds to\nmojom::SpeculationAction (although PrefetchWithSubresources is omitted as it\nisn't being used by clients).",
+          "type": "string",
+          "enum": [
+            "Prefetch",
+            "Prerender"
+          ]
+        },
+        {
+          "id": "SpeculationTargetHint",
+          "description": "Corresponds to mojom::SpeculationTargetHint.\nSee https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints",
+          "type": "string",
+          "enum": [
+            "Blank",
+            "Self"
+          ]
+        },
+        {
+          "id": "PreloadingAttemptKey",
+          "description": "A key that identifies a preloading attempt.\n\nThe url used is the url specified by the trigger (i.e. the initial URL), and\nnot the final url that is navigated to. For example, prerendering allows\nsame-origin main frame navigations during the attempt, but the attempt is\nstill keyed with the initial URL.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "loaderId",
+              "$ref": "Network.LoaderId"
+            },
+            {
+              "name": "action",
+              "$ref": "SpeculationAction"
+            },
+            {
+              "name": "url",
+              "type": "string"
+            },
+            {
+              "name": "targetHint",
+              "optional": true,
+              "$ref": "SpeculationTargetHint"
+            }
+          ]
+        },
+        {
+          "id": "PreloadingAttemptSource",
+          "description": "Lists sources for a preloading attempt, specifically the ids of rule sets\nthat had a speculation rule that triggered the attempt, and the\nBackendNodeIds of <a href> or <area href> elements that triggered the\nattempt (in the case of attempts triggered by a document rule). It is\npossible for mulitple rule sets and links to trigger a single attempt.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "ruleSetIds",
+              "type": "array",
+              "items": {
+                "$ref": "RuleSetId"
+              }
+            },
+            {
+              "name": "nodeIds",
+              "type": "array",
+              "items": {
+                "$ref": "DOM.BackendNodeId"
+              }
             }
           ]
+        },
+        {
+          "id": "PrerenderFinalStatus",
+          "description": "List of FinalStatus reasons for Prerender2.",
+          "type": "string",
+          "enum": [
+            "Activated",
+            "Destroyed",
+            "LowEndDevice",
+            "InvalidSchemeRedirect",
+            "InvalidSchemeNavigation",
+            "InProgressNavigation",
+            "NavigationRequestBlockedByCsp",
+            "MainFrameNavigation",
+            "MojoBinderPolicy",
+            "RendererProcessCrashed",
+            "RendererProcessKilled",
+            "Download",
+            "TriggerDestroyed",
+            "NavigationNotCommitted",
+            "NavigationBadHttpStatus",
+            "ClientCertRequested",
+            "NavigationRequestNetworkError",
+            "MaxNumOfRunningPrerendersExceeded",
+            "CancelAllHostsForTesting",
+            "DidFailLoad",
+            "Stop",
+            "SslCertificateError",
+            "LoginAuthRequested",
+            "UaChangeRequiresReload",
+            "BlockedByClient",
+            "AudioOutputDeviceRequested",
+            "MixedContent",
+            "TriggerBackgrounded",
+            "EmbedderTriggeredAndCrossOriginRedirected",
+            "MemoryLimitExceeded",
+            "FailToGetMemoryUsage",
+            "DataSaverEnabled",
+            "HasEffectiveUrl",
+            "ActivatedBeforeStarted",
+            "InactivePageRestriction",
+            "StartFailed",
+            "TimeoutBackgrounded",
+            "CrossSiteRedirectInInitialNavigation",
+            "CrossSiteNavigationInInitialNavigation",
+            "SameSiteCrossOriginRedirectNotOptInInInitialNavigation",
+            "SameSiteCrossOriginNavigationNotOptInInInitialNavigation",
+            "ActivationNavigationParameterMismatch",
+            "ActivatedInBackground",
+            "EmbedderHostDisallowed",
+            "ActivationNavigationDestroyedBeforeSuccess",
+            "TabClosedByUserGesture",
+            "TabClosedWithoutUserGesture",
+            "PrimaryMainFrameRendererProcessCrashed",
+            "PrimaryMainFrameRendererProcessKilled",
+            "ActivationFramePolicyNotCompatible",
+            "PreloadingDisabled",
+            "BatterySaverEnabled",
+            "ActivatedDuringMainFrameNavigation",
+            "PreloadingUnsupportedByWebContents",
+            "CrossSiteRedirectInMainFrameNavigation",
+            "CrossSiteNavigationInMainFrameNavigation",
+            "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation",
+            "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation"
+          ]
+        },
+        {
+          "id": "PreloadingStatus",
+          "description": "Preloading status values, see also PreloadingTriggeringOutcome. This\nstatus is shared by prefetchStatusUpdated and prerenderStatusUpdated.",
+          "type": "string",
+          "enum": [
+            "Pending",
+            "Running",
+            "Ready",
+            "Success",
+            "Failure",
+            "NotSupported"
+          ]
         }
       ],
       "commands": [
@@ -22961,6 +23095,239 @@
               "$ref": "RuleSetId"
             }
           ]
+        },
+        {
+          "name": "prerenderAttemptCompleted",
+          "description": "Fired when a prerender attempt is completed.",
+          "parameters": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "initiatingFrameId",
+              "description": "The frame id of the frame initiating prerendering.",
+              "$ref": "Page.FrameId"
+            },
+            {
+              "name": "prerenderingUrl",
+              "type": "string"
+            },
+            {
+              "name": "finalStatus",
+              "$ref": "PrerenderFinalStatus"
+            },
+            {
+              "name": "disallowedApiMethod",
+              "description": "This is used to give users more information about the name of the API call\nthat is incompatible with prerender and has caused the cancellation of the attempt",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "prefetchStatusUpdated",
+          "description": "Fired when a prefetch attempt is updated.",
+          "parameters": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "initiatingFrameId",
+              "description": "The frame id of the frame initiating prefetch.",
+              "$ref": "Page.FrameId"
+            },
+            {
+              "name": "prefetchUrl",
+              "type": "string"
+            },
+            {
+              "name": "status",
+              "$ref": "PreloadingStatus"
+            }
+          ]
+        },
+        {
+          "name": "prerenderStatusUpdated",
+          "description": "Fired when a prerender attempt is updated.",
+          "parameters": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "initiatingFrameId",
+              "description": "The frame id of the frame initiating prerender.",
+              "$ref": "Page.FrameId"
+            },
+            {
+              "name": "prerenderingUrl",
+              "type": "string"
+            },
+            {
+              "name": "status",
+              "$ref": "PreloadingStatus"
+            }
+          ]
+        },
+        {
+          "name": "preloadingAttemptSourcesUpdated",
+          "description": "Send a list of sources for all preloading attempts in a document.",
+          "parameters": [
+            {
+              "name": "loaderId",
+              "$ref": "Network.LoaderId"
+            },
+            {
+              "name": "preloadingAttemptSources",
+              "type": "array",
+              "items": {
+                "$ref": "PreloadingAttemptSource"
+              }
+            }
+          ]
+        }
+      ]
+    },
+    {
+      "domain": "FedCm",
+      "description": "This domain allows interacting with the FedCM dialog.",
+      "experimental": true,
+      "types": [
+        {
+          "id": "LoginState",
+          "description": "Whether this is a sign-up or sign-in action for this account, i.e.\nwhether this account has ever been used to sign in to this RP before.",
+          "type": "string",
+          "enum": [
+            "SignIn",
+            "SignUp"
+          ]
+        },
+        {
+          "id": "Account",
+          "description": "Corresponds to IdentityRequestAccount",
+          "type": "object",
+          "properties": [
+            {
+              "name": "accountId",
+              "type": "string"
+            },
+            {
+              "name": "email",
+              "type": "string"
+            },
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "givenName",
+              "type": "string"
+            },
+            {
+              "name": "pictureUrl",
+              "type": "string"
+            },
+            {
+              "name": "idpConfigUrl",
+              "type": "string"
+            },
+            {
+              "name": "idpSigninUrl",
+              "type": "string"
+            },
+            {
+              "name": "loginState",
+              "$ref": "LoginState"
+            },
+            {
+              "name": "termsOfServiceUrl",
+              "description": "These two are only set if the loginState is signUp",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "privacyPolicyUrl",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        }
+      ],
+      "events": [
+        {
+          "name": "dialogShown",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
+            },
+            {
+              "name": "accounts",
+              "type": "array",
+              "items": {
+                "$ref": "Account"
+              }
+            },
+            {
+              "name": "title",
+              "description": "These exist primarily so that the caller can verify the\nRP context was used appropriately.",
+              "type": "string"
+            },
+            {
+              "name": "subtitle",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "enable",
+          "parameters": [
+            {
+              "name": "disableRejectionDelay",
+              "description": "Allows callers to disable the promise rejection delay that would\nnormally happen, if this is unimportant to what's being tested.\n(step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "disable"
+        },
+        {
+          "name": "selectAccount",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
+            },
+            {
+              "name": "accountIndex",
+              "type": "integer"
+            }
+          ]
+        },
+        {
+          "name": "dismissDialog",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
+            },
+            {
+              "name": "triggerCooldown",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "resetCooldown",
+          "description": "Resets the cooldown time, if any, to allow the next FedCM call to show\na dialog even if one was recently dismissed by the user."
         }
       ]
     },
