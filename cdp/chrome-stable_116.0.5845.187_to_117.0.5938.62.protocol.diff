--- ./cdp/chrome-stable_116.0.5845.187.protocol.json	2023-09-13 00:53:38.379014790 +0000
+++ ./cdp/chrome-stable_117.0.5938.62.protocol.json	2023-09-13 00:54:14.575333825 +0000
@@ -106,7 +106,7 @@
             },
             {
               "name": "nativeSource",
-              "description": "The native markup source for this value, e.g. a <label> element.",
+              "description": "The native markup source for this value, e.g. a `<label>` element.",
               "optional": true,
               "$ref": "AXValueNativeSourceType"
             },
@@ -993,7 +993,8 @@
             "ExcludeInvalidSameParty",
             "ExcludeSamePartyCrossPartyContext",
             "ExcludeDomainNonASCII",
-            "ExcludeThirdPartyCookieBlockedInFirstPartySet"
+            "ExcludeThirdPartyCookieBlockedInFirstPartySet",
+            "ExcludeThirdPartyPhaseout"
           ]
         },
         {
@@ -1009,7 +1010,8 @@
             "WarnSameSiteLaxCrossDowngradeStrict",
             "WarnSameSiteLaxCrossDowngradeLax",
             "WarnAttributeValueExceedsMaxSize",
-            "WarnDomainNonASCII"
+            "WarnDomainNonASCII",
+            "WarnThirdPartyPhaseout"
           ]
         },
         {
@@ -1420,7 +1422,8 @@
             "InvalidRegisterOsSourceHeader",
             "InvalidRegisterOsTriggerHeader",
             "WebAndOsHeaders",
-            "NoWebOrOsSupport"
+            "NoWebOrOsSupport",
+            "NavigationRegistrationWithoutTransientUserActivation"
           ]
         },
         {
@@ -1479,6 +1482,7 @@
         },
         {
           "id": "NavigatorUserAgentIssueDetails",
+          "deprecated": true,
           "type": "object",
           "properties": [
             {
@@ -1506,7 +1510,8 @@
             "FormInputAssignedAutocompleteValueToIdOrNameAttributeError",
             "FormLabelHasNeitherForNorNestedInput",
             "FormLabelForMatchesNonExistingIdError",
-            "FormInputHasWrongButWellIntendedAutocompleteValueError"
+            "FormInputHasWrongButWellIntendedAutocompleteValueError",
+            "ResponseWasBlockedByORB"
           ]
         },
         {
@@ -1533,6 +1538,11 @@
               "name": "violatingNodeAttribute",
               "optional": true,
               "type": "string"
+            },
+            {
+              "name": "request",
+              "optional": true,
+              "$ref": "AffectedRequest"
             }
           ]
         },
@@ -1806,6 +1816,7 @@
             },
             {
               "name": "navigatorUserAgentIssueDetails",
+              "deprecated": true,
               "optional": true,
               "$ref": "NavigatorUserAgentIssueDetails"
             },
@@ -3076,7 +3087,7 @@
             },
             {
               "name": "isMutable",
-              "description": "Whether this stylesheet is mutable. Inline stylesheets become mutable\nafter they have been modified via CSSOM API.\n<link> element's stylesheets become mutable only if DevTools modifies them.\nConstructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.",
+              "description": "Whether this stylesheet is mutable. Inline stylesheets become mutable\nafter they have been modified via CSSOM API.\n`<link>` element's stylesheets become mutable only if DevTools modifies them.\nConstructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.",
               "type": "boolean"
             },
             {
@@ -3202,10 +3213,34 @@
               "items": {
                 "$ref": "CSSScope"
               }
+            },
+            {
+              "name": "ruleTypes",
+              "description": "The array keeps the types of ancestor CSSRules from the innermost going outwards.",
+              "experimental": true,
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "CSSRuleType"
+              }
             }
           ]
         },
         {
+          "id": "CSSRuleType",
+          "description": "Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.\nThis list only contains rule types that are collected during the ancestor rule collection.",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "MediaRule",
+            "SupportsRule",
+            "ContainerRule",
+            "LayerRule",
+            "ScopeRule",
+            "StyleRule"
+          ]
+        },
+        {
           "id": "RuleUsage",
           "description": "CSS coverage information.",
           "type": "object",
@@ -4939,7 +4974,7 @@
     },
     {
       "domain": "DOM",
-      "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\nthat has an `id`. This `id` can be used to get additional information on the Node, resolve it into\nthe JavaScript object wrapper, etc. It is important that client receives DOM events only for the\nnodes that are known to the client. Backend keeps track of the nodes that were sent to the client\nand never sends the same node twice. It is client's responsibility to collect information about\nthe nodes that were sent to the client.<p>Note that `iframe` owner elements will return\ncorresponding document elements as their child nodes.</p>",
+      "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\nthat has an `id`. This `id` can be used to get additional information on the Node, resolve it into\nthe JavaScript object wrapper, etc. It is important that client receives DOM events only for the\nnodes that are known to the client. Backend keeps track of the nodes that were sent to the client\nand never sends the same node twice. It is client's responsibility to collect information about\nthe nodes that were sent to the client. Note that `iframe` owner elements will return\ncorresponding document elements as their child nodes.",
       "dependencies": [
         "Runtime"
       ],
@@ -8946,7 +8981,7 @@
       "types": [
         {
           "id": "StreamHandle",
-          "description": "This is either obtained from another method or specified as `blob:&lt;uuid&gt;` where\n`&lt;uuid&gt` is an UUID of a Blob.",
+          "description": "This is either obtained from another method or specified as `blob:<uuid>` where\n`<uuid>` is an UUID of a Blob.",
           "type": "string"
         }
       ],
@@ -10043,6 +10078,10 @@
           ]
         },
         {
+          "name": "cancelDragging",
+          "description": "Cancels any active dragging in the page."
+        },
+        {
           "name": "emulateTouchFromMouseEvent",
           "description": "Emulates touch event from the mouse event parameters.",
           "experimental": true,
@@ -11667,7 +11706,11 @@
             "InsecurePrivateNetwork",
             "InvalidPrivateNetworkAccess",
             "UnexpectedPrivateNetworkAccess",
-            "NoCorsRedirectModeNotFollow"
+            "NoCorsRedirectModeNotFollow",
+            "PreflightMissingPrivateNetworkAccessId",
+            "PreflightMissingPrivateNetworkAccessName",
+            "PrivateNetworkAccessPermissionUnavailable",
+            "PrivateNetworkAccessPermissionDenied"
           ]
         },
         {
@@ -12168,7 +12211,8 @@
             "SchemefulSameSiteUnspecifiedTreatedAsLax",
             "SamePartyFromCrossPartyContext",
             "SamePartyConflictsWithOtherAttributes",
-            "NameValuePairExceedsMaxSize"
+            "NameValuePairExceedsMaxSize",
+            "DisallowedCharacter"
           ]
         },
         {
@@ -12525,7 +12569,7 @@
             },
             {
               "name": "headerIntegrity",
-              "description": "Signed exchange header integrity hash in the form of \"sha256-<base64-hash-value>\".",
+              "description": "Signed exchange header integrity hash in the form of `sha256-<base64-hash-value>`.",
               "type": "string"
             }
           ]
@@ -12611,7 +12655,8 @@
           "enum": [
             "deflate",
             "gzip",
-            "br"
+            "br",
+            "zstd"
           ]
         },
         {
@@ -13743,12 +13788,6 @@
               "name": "encodedDataLength",
               "description": "Total number of bytes received for this request.",
               "type": "number"
-            },
-            {
-              "name": "shouldReportCorbBlocking",
-              "description": "Set when 1) response was blocked by Cross-Origin Read Blocking and also\n2) this needs to be reported to the DevTools console.",
-              "optional": true,
-              "type": "boolean"
             }
           ]
         },
@@ -15706,6 +15745,7 @@
             "ch-ua-platform",
             "ch-ua-model",
             "ch-ua-mobile",
+            "ch-ua-form-factor",
             "ch-ua-full-version",
             "ch-ua-full-version-list",
             "ch-ua-platform-version",
@@ -16645,6 +16685,7 @@
             "FencedFramesEmbedder",
             "CookieDisabled",
             "HTTPAuthRequired",
+            "CookieFlushed",
             "WebSocket",
             "WebTransport",
             "WebRTC",
@@ -16656,14 +16697,12 @@
             "DocumentLoaded",
             "DedicatedWorkerOrWorklet",
             "OutstandingNetworkRequestOthers",
-            "OutstandingIndexedDBTransaction",
             "RequestedMIDIPermission",
             "RequestedAudioCapturePermission",
             "RequestedVideoCapturePermission",
             "RequestedBackForwardCacheBlockedSensors",
             "RequestedBackgroundWorkPermission",
             "BroadcastChannel",
-            "IndexedDBConnection",
             "WebXR",
             "SharedWorker",
             "WebLocks",
@@ -16825,6 +16864,13 @@
               "experimental": true,
               "optional": true,
               "type": "boolean"
+            },
+            {
+              "name": "runImmediately",
+              "description": "If true, runs the script immediately on existing execution contexts or worlds.\nDefault: false.",
+              "experimental": true,
+              "optional": true,
+              "type": "boolean"
             }
           ],
           "returns": [
@@ -17401,6 +17447,13 @@
                 "ReturnAsBase64",
                 "ReturnAsStream"
               ]
+            },
+            {
+              "name": "generateTaggedPDF",
+              "description": "Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.",
+              "experimental": true,
+              "optional": true,
+              "type": "boolean"
             }
           ],
           "returns": [
@@ -18024,7 +18077,7 @@
             },
             {
               "name": "backendNodeId",
-              "description": "Input node id. Only present for file choosers opened via an <input type=\"file\"> element.",
+              "description": "Input node id. Only present for file choosers opened via an `<input type=\"file\">` element.",
               "experimental": true,
               "optional": true,
               "$ref": "DOM.BackendNodeId"
@@ -19823,6 +19876,157 @@
               "$ref": "StorageBucketsDurability"
             }
           ]
+        },
+        {
+          "id": "AttributionReportingSourceType",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "navigation",
+            "event"
+          ]
+        },
+        {
+          "id": "UnsignedInt64AsBase10",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "UnsignedInt128AsBase16",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "SignedInt64AsBase10",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "AttributionReportingFilterDataEntry",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "type": "string"
+            },
+            {
+              "name": "values",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingAggregationKeysEntry",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "type": "string"
+            },
+            {
+              "name": "value",
+              "$ref": "UnsignedInt128AsBase16"
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingSourceRegistration",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "time",
+              "$ref": "Network.TimeSinceEpoch"
+            },
+            {
+              "name": "expiry",
+              "description": "duration in seconds",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "eventReportWindow",
+              "description": "duration in seconds",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "aggregatableReportWindow",
+              "description": "duration in seconds",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "type",
+              "$ref": "AttributionReportingSourceType"
+            },
+            {
+              "name": "sourceOrigin",
+              "type": "string"
+            },
+            {
+              "name": "reportingOrigin",
+              "type": "string"
+            },
+            {
+              "name": "destinationSites",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
+              "name": "eventId",
+              "$ref": "UnsignedInt64AsBase10"
+            },
+            {
+              "name": "priority",
+              "$ref": "SignedInt64AsBase10"
+            },
+            {
+              "name": "filterData",
+              "type": "array",
+              "items": {
+                "$ref": "AttributionReportingFilterDataEntry"
+              }
+            },
+            {
+              "name": "aggregationKeys",
+              "type": "array",
+              "items": {
+                "$ref": "AttributionReportingAggregationKeysEntry"
+              }
+            },
+            {
+              "name": "debugKey",
+              "optional": true,
+              "$ref": "UnsignedInt64AsBase10"
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingSourceRegistrationResult",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "success",
+            "internalError",
+            "insufficientSourceCapacity",
+            "insufficientUniqueDestinationCapacity",
+            "excessiveReportingOrigins",
+            "prohibitedByBrowserPolicy",
+            "successNoised",
+            "destinationReportingLimitReached",
+            "destinationGlobalLimitReached",
+            "destinationBothLimitsReached",
+            "reportingOriginsPerSiteLimitReached",
+            "exceedsMaxChannelCapacity"
+          ]
         }
       ],
       "commands": [
@@ -20283,6 +20487,29 @@
               }
             }
           ]
+        },
+        {
+          "name": "setAttributionReportingLocalTestingMode",
+          "description": "https://wicg.github.io/attribution-reporting-api/",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enabled",
+              "description": "If enabled, noise is suppressed and reports are sent immediately.",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "setAttributionReportingTracking",
+          "description": "Enables/disables issuing of Attribution Reporting events.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enable",
+              "type": "boolean"
+            }
+          ]
         }
       ],
       "events": [
@@ -20455,6 +20682,21 @@
               "type": "string"
             }
           ]
+        },
+        {
+          "name": "attributionReportingSourceRegistered",
+          "description": "TODO(crbug.com/1458532): Add other Attribution Reporting events, e.g.\ntrigger registration.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "registration",
+              "$ref": "AttributionReportingSourceRegistration"
+            },
+            {
+              "name": "result",
+              "$ref": "AttributionReportingSourceRegistrationResult"
+            }
+          ]
         }
       ]
     },
@@ -22059,7 +22301,7 @@
         },
         {
           "name": "getResponseBody",
-          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.",
+          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.\nNote that the response body is not available for redirects. Requests\npaused in the _redirect received_ state may be differentiated by\n`responseCode` and presence of `location` response header, see\ncomments to `requestPaused` for details.",
           "parameters": [
             {
               "name": "requestId",
@@ -22100,7 +22342,7 @@
       "events": [
         {
           "name": "requestPaused",
-          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.",
+          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.\nRedirect responses and subsequent requests are reported similarly to regular\nresponses and requests. Redirect responses may be distinguished by the value\nof `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with\npresence of the `location` header. Requests resulting from a redirect will\nhave `redirectedRequestId` field set.",
           "parameters": [
             {
               "name": "requestId",
@@ -23339,12 +23581,12 @@
             },
             {
               "name": "sourceText",
-              "description": "Source text of JSON representing the rule set. If it comes from\n<script> tag, it is the textContent of the node. Note that it is\na JSON for valid case.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html\n- https://github.com/WICG/nav-speculation/blob/main/triggers.md",
+              "description": "Source text of JSON representing the rule set. If it comes from\n`<script>` tag, it is the textContent of the node. Note that it is\na JSON for valid case.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html\n- https://github.com/WICG/nav-speculation/blob/main/triggers.md",
               "type": "string"
             },
             {
               "name": "backendNodeId",
-              "description": "A speculation rule set is either added through an inline\n<script> tag or through an external resource via the\n'Speculation-Rules' HTTP header. For the first case, we include\nthe BackendNodeId of the relevant <script> tag. For the second\ncase, we include the external URL where the rule set was loaded\nfrom, and also RequestId if Network domain is enabled.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header",
+              "description": "A speculation rule set is either added through an inline\n`<script>` tag or through an external resource via the\n'Speculation-Rules' HTTP header. For the first case, we include\nthe BackendNodeId of the relevant `<script>` tag. For the second\ncase, we include the external URL where the rule set was loaded\nfrom, and also RequestId if Network domain is enabled.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header",
               "optional": true,
               "$ref": "DOM.BackendNodeId"
             },
@@ -23481,7 +23723,6 @@
             "AudioOutputDeviceRequested",
             "MixedContent",
             "TriggerBackgrounded",
-            "EmbedderTriggeredAndCrossOriginRedirected",
             "MemoryLimitExceeded",
             "FailToGetMemoryUsage",
             "DataSaverEnabled",
@@ -23514,7 +23755,9 @@
             "MemoryPressureOnTrigger",
             "MemoryPressureAfterTriggered",
             "PrerenderingDisabledByDevTools",
-            "ResourceLoadBlockedByClient"
+            "ResourceLoadBlockedByClient",
+            "SpeculationRuleRemoved",
+            "ActivatedWithAuxiliaryBrowsingContexts"
           ]
         },
         {
@@ -23640,6 +23883,14 @@
             {
               "name": "disabledByBatterySaver",
               "type": "boolean"
+            },
+            {
+              "name": "disabledByHoldbackPrefetchSpeculationRules",
+              "type": "boolean"
+            },
+            {
+              "name": "disabledByHoldbackPrerenderSpeculationRules",
+              "type": "boolean"
             }
           ]
         },
@@ -23667,6 +23918,10 @@
             {
               "name": "prefetchStatus",
               "$ref": "PrefetchStatus"
+            },
+            {
+              "name": "requestId",
+              "$ref": "Network.RequestId"
             }
           ]
         },
@@ -23686,6 +23941,12 @@
               "name": "prerenderStatus",
               "optional": true,
               "$ref": "PrerenderFinalStatus"
+            },
+            {
+              "name": "disallowedMojoInterface",
+              "description": "This is used to give users more information about the name of Mojo interface\nthat is incompatible with prerender and has caused the cancellation of the attempt.",
+              "optional": true,
+              "type": "string"
             }
           ]
         },
@@ -26038,6 +26299,12 @@
               "description": "Deep serialization depth. Default is full depth. Respected only in `deep` serialization mode.",
               "optional": true,
               "type": "integer"
+            },
+            {
+              "name": "additionalParameters",
+              "description": "Embedder-specific parameters. For example if connected to V8 in Chrome these control DOM\nserialization via `maxNodeDepth: integer` and `includeShadowTree: \"none\" | \"open\" | \"all\"`.\nValues can be only of type string or integer.",
+              "optional": true,
+              "type": "object"
             }
           ]
         },
