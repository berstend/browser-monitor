--- ./cdp/chrome-stable_127.0.6533.119.protocol.json	2024-08-22 01:05:20.437067105 +0000
+++ ./cdp/chrome-stable_128.0.6613.84.protocol.json	2024-08-22 01:05:40.241126135 +0000
@@ -248,7 +248,8 @@
             "errormessage",
             "flowto",
             "labelledby",
-            "owns"
+            "owns",
+            "url"
           ]
         },
         {
@@ -1606,7 +1607,6 @@
           "id": "GenericIssueErrorType",
           "type": "string",
           "enum": [
-            "CrossOriginPortalPostMessageError",
             "FormLabelForNameError",
             "FormDuplicateIdForInputError",
             "FormInputWithNoLabelError",
@@ -1753,7 +1753,9 @@
             "ClientMetadataNoResponse",
             "ClientMetadataInvalidResponse",
             "ClientMetadataInvalidContentType",
+            "IdpNotPotentiallyTrustworthy",
             "DisabledInSettings",
+            "DisabledInFlags",
             "ErrorFetchingSignin",
             "InvalidSigninResponse",
             "AccountsHttpNotFound",
@@ -1776,6 +1778,7 @@
             "NotSignedInWithIdp",
             "MissingTransientUserActivation",
             "ReplacedByButtonMode",
+            "InvalidFieldsSpecified",
             "RelyingPartyOriginIsOpaque",
             "TypeNotMatching"
           ]
@@ -2711,6 +2714,12 @@
               "type": "boolean"
             },
             {
+              "name": "allowWithoutGesture",
+              "description": "For \"fullscreen\" permission, must specify allowWithoutGesture:true.",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
               "name": "panTiltZoom",
               "description": "For \"camera\" permission, may specify panTiltZoom.",
               "optional": true,
@@ -4207,6 +4216,10 @@
               "name": "style",
               "description": "Associated style declaration.",
               "$ref": "CSSStyle"
+            },
+            {
+              "name": "active",
+              "type": "boolean"
             }
           ]
         },
@@ -4618,7 +4631,7 @@
             },
             {
               "name": "cssPositionTryRules",
-              "description": "A list of CSS @position-try rules matching this node, based on the position-try-options property.",
+              "description": "A list of CSS @position-try rules matching this node, based on the position-try-fallbacks property.",
               "optional": true,
               "type": "array",
               "items": {
@@ -4626,6 +4639,12 @@
               }
             },
             {
+              "name": "activePositionFallbackIndex",
+              "description": "Index of the active fallback in the applied position-try-fallback property,\nwill not be set if there is no active position-try fallback.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
               "name": "cssPropertyRules",
               "description": "A list of CSS at-property rules matching this node.",
               "optional": true,
@@ -9107,6 +9126,37 @@
           ]
         },
         {
+          "id": "PressureSource",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "cpu"
+          ]
+        },
+        {
+          "id": "PressureState",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "nominal",
+            "fair",
+            "serious",
+            "critical"
+          ]
+        },
+        {
+          "id": "PressureMetadata",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "available",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        },
+        {
           "id": "DisabledImageType",
           "description": "Enum of image types that can be disabled.",
           "experimental": true,
@@ -9463,6 +9513,41 @@
           ]
         },
         {
+          "name": "setPressureSourceOverrideEnabled",
+          "description": "Overrides a pressure source of a given type, as used by the Compute\nPressure API, so that updates to PressureObserver.observe() are provided\nvia setPressureStateOverride instead of being retrieved from\nplatform-provided telemetry data.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enabled",
+              "type": "boolean"
+            },
+            {
+              "name": "source",
+              "$ref": "PressureSource"
+            },
+            {
+              "name": "metadata",
+              "optional": true,
+              "$ref": "PressureMetadata"
+            }
+          ]
+        },
+        {
+          "name": "setPressureStateOverride",
+          "description": "Provides a given pressure state that will be processed and eventually be\ndelivered to PressureObserver users. |source| must have been previously\noverridden by setPressureSourceOverrideEnabled.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "source",
+              "$ref": "PressureSource"
+            },
+            {
+              "name": "state",
+              "$ref": "PressureState"
+            }
+          ]
+        },
+        {
           "name": "setIdleOverride",
           "description": "Overrides the Idle state.",
           "parameters": [
@@ -9869,6 +9954,108 @@
       ]
     },
     {
+      "domain": "FileSystem",
+      "experimental": true,
+      "dependencies": [
+        "Network",
+        "Storage"
+      ],
+      "types": [
+        {
+          "id": "File",
+          "type": "object",
+          "properties": [
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "lastModified",
+              "description": "Timestamp",
+              "$ref": "Network.TimeSinceEpoch"
+            },
+            {
+              "name": "size",
+              "description": "Size in bytes",
+              "type": "number"
+            },
+            {
+              "name": "type",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "Directory",
+          "type": "object",
+          "properties": [
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "nestedDirectories",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
+              "name": "nestedFiles",
+              "description": "Files that are directly nested under this directory.",
+              "type": "array",
+              "items": {
+                "$ref": "File"
+              }
+            }
+          ]
+        },
+        {
+          "id": "BucketFileSystemLocator",
+          "type": "object",
+          "properties": [
+            {
+              "name": "storageKey",
+              "description": "Storage key",
+              "$ref": "Storage.SerializedStorageKey"
+            },
+            {
+              "name": "bucketName",
+              "description": "Bucket name. Not passing a `bucketName` will retrieve the default Bucket. (https://developer.mozilla.org/en-US/docs/Web/API/Storage_API#storage_buckets)",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "pathComponents",
+              "description": "Path to the directory using each path component as an array item.",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "getDirectory",
+          "parameters": [
+            {
+              "name": "bucketFileSystemLocator",
+              "$ref": "BucketFileSystemLocator"
+            }
+          ],
+          "returns": [
+            {
+              "name": "directory",
+              "description": "Returns the directory object at the path.",
+              "$ref": "Directory"
+            }
+          ]
+        }
+      ]
+    },
+    {
       "domain": "IndexedDB",
       "experimental": true,
       "dependencies": [
@@ -13669,7 +13856,8 @@
             "RestrictProperties",
             "UnsafeNone",
             "SameOriginPlusCoep",
-            "RestrictPropertiesPlusCoep"
+            "RestrictPropertiesPlusCoep",
+            "NoopenerAllowPopups"
           ]
         },
         {
@@ -15411,6 +15599,11 @@
           ]
         },
         {
+          "name": "policyUpdated",
+          "description": "Fired once security policy has been updated.",
+          "experimental": true
+        },
+        {
           "name": "subresourceWebBundleMetadataReceived",
           "description": "Fired once when parsing the .wbn file has succeeded.\nThe event contains the information about the web bundle contents.",
           "experimental": true,
@@ -16820,6 +17013,7 @@
             "compute-pressure",
             "cross-origin-isolated",
             "deferred-fetch",
+            "digital-credentials-get",
             "direct-sockets",
             "display-capture",
             "document-domain",
@@ -18157,7 +18351,6 @@
             "Printing",
             "WebDatabase",
             "PictureInPicture",
-            "Portal",
             "SpeechRecognizer",
             "IdleManager",
             "PaymentManager",
@@ -21477,6 +21670,58 @@
           ]
         },
         {
+          "id": "AttributionReportingAggregatableDebugReportingData",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "keyPiece",
+              "$ref": "UnsignedInt128AsBase16"
+            },
+            {
+              "name": "value",
+              "description": "number instead of integer because not all uint32 can be represented by\nint",
+              "type": "number"
+            },
+            {
+              "name": "types",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingAggregatableDebugReportingConfig",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "budget",
+              "description": "number instead of integer because not all uint32 can be represented by\nint, only present for source registrations",
+              "optional": true,
+              "type": "number"
+            },
+            {
+              "name": "keyPiece",
+              "$ref": "UnsignedInt128AsBase16"
+            },
+            {
+              "name": "debugData",
+              "type": "array",
+              "items": {
+                "$ref": "AttributionReportingAggregatableDebugReportingData"
+              }
+            },
+            {
+              "name": "aggregationCoordinatorOrigin",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        },
+        {
           "id": "AttributionReportingSourceRegistration",
           "experimental": true,
           "type": "object",
@@ -21551,6 +21796,14 @@
             {
               "name": "triggerDataMatching",
               "$ref": "AttributionReportingTriggerDataMatching"
+            },
+            {
+              "name": "destinationLimitPriority",
+              "$ref": "SignedInt64AsBase10"
+            },
+            {
+              "name": "aggregatableDebugReportingConfig",
+              "$ref": "AttributionReportingAggregatableDebugReportingConfig"
             }
           ]
         },
@@ -21571,7 +21824,8 @@
             "destinationBothLimitsReached",
             "reportingOriginsPerSiteLimitReached",
             "exceedsMaxChannelCapacity",
-            "exceedsMaxTriggerStateCardinality"
+            "exceedsMaxTriggerStateCardinality",
+            "destinationPerDayReportingLimitReached"
           ]
         },
         {
@@ -21596,6 +21850,10 @@
               "name": "value",
               "description": "number instead of integer because not all uint32 can be represented by\nint",
               "type": "number"
+            },
+            {
+              "name": "filteringId",
+              "$ref": "UnsignedInt64AsBase10"
             }
           ]
         },
@@ -21722,6 +21980,10 @@
               }
             },
             {
+              "name": "aggregatableFilteringIdMaxBytes",
+              "type": "integer"
+            },
+            {
               "name": "debugReporting",
               "type": "boolean"
             },
@@ -21738,6 +22000,10 @@
               "name": "triggerContextId",
               "optional": true,
               "type": "string"
+            },
+            {
+              "name": "aggregatableDebugReportingConfig",
+              "$ref": "AttributionReportingAggregatableDebugReportingConfig"
             }
           ]
         },
@@ -22998,7 +23264,7 @@
             },
             {
               "name": "subtype",
-              "description": "Provides additional details for specific target types. For example, for\nthe type of \"page\", this may be set to \"portal\" or \"prerender\".",
+              "description": "Provides additional details for specific target types. For example, for\nthe type of \"page\", this may be set to \"prerender\".",
               "experimental": true,
               "optional": true,
               "type": "string"
@@ -25756,7 +26022,8 @@
             "ActivationUrlHasEffectiveUrl",
             "JavaScriptInterfaceAdded",
             "JavaScriptInterfaceRemoved",
-            "AllPrerenderingCanceled"
+            "AllPrerenderingCanceled",
+            "WindowClosed"
           ]
         },
         {
@@ -26228,6 +26495,15 @@
               "type": "string"
             }
           ]
+        },
+        {
+          "id": "DisplayMode",
+          "description": "If user prefers opening the app in browser or an app window.",
+          "type": "string",
+          "enum": [
+            "standalone",
+            "browser"
+          ]
         }
       ],
       "commands": [
@@ -26273,7 +26549,7 @@
         },
         {
           "name": "uninstall",
-          "description": "Uninstals the given manifest_id and closes any opened app windows.",
+          "description": "Uninstalls the given manifest_id and closes any opened app windows.",
           "parameters": [
             {
               "name": "manifestId",
@@ -26305,7 +26581,7 @@
         },
         {
           "name": "launchFilesInApp",
-          "description": "Opens one or more local files from an installed web app identified by its\nmanifestId. The web app needs to have file handlers registered to process\nthe files. The API returns one or more page Target.TargetIDs which can be\nused to attach to via Target.attachToTarget or similar APIs.\nIf some files in the parameters cannot be handled by the web app, they will\nbe ignored. If none of the files can be handled, this API returns an error.\nIf no files provided as the parameter, this API also returns an error.\n\nAccording to the definition of the file handlers in the manifest file, one\nTarget.TargetID may represent a page handling one or more files. The order\nof the returned Target.TargetIDs is not guaranteed.\n\nTODO(crbug.com/339454034): Check the existences of the input files.",
+          "description": "Opens one or more local files from an installed web app identified by its\nmanifestId. The web app needs to have file handlers registered to process\nthe files. The API returns one or more page Target.TargetIDs which can be\nused to attach to via Target.attachToTarget or similar APIs.\nIf some files in the parameters cannot be handled by the web app, they will\nbe ignored. If none of the files can be handled, this API returns an error.\nIf no files are provided as the parameter, this API also returns an error.\n\nAccording to the definition of the file handlers in the manifest file, one\nTarget.TargetID may represent a page handling one or more files. The order\nof the returned Target.TargetIDs is not guaranteed.\n\nTODO(crbug.com/339454034): Check the existences of the input files.",
           "parameters": [
             {
               "name": "manifestId",
@@ -26332,11 +26608,32 @@
         },
         {
           "name": "openCurrentPageInApp",
-          "description": "Opens the current page in its web app identified by the manifest id, needs\nto be called on a page target. This function returns immediately without\nwaiting for the app finishing loading.",
+          "description": "Opens the current page in its web app identified by the manifest id, needs\nto be called on a page target. This function returns immediately without\nwaiting for the app to finish loading.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "changeAppUserSettings",
+          "description": "Changes user settings of the web app identified by its manifestId. If the\napp was not installed, this command returns an error. Unset parameters will\nbe ignored; unrecognized values will cause an error.\n\nUnlike the ones defined in the manifest files of the web apps, these\nsettings are provided by the browser and controlled by the users, they\nimpact the way the browser handling the web apps.\n\nSee the comment of each parameter.",
           "parameters": [
             {
               "name": "manifestId",
               "type": "string"
+            },
+            {
+              "name": "linkCapturing",
+              "description": "If user allows the links clicked on by the user in the app's scope, or\nextended scope if the manifest has scope extensions and the flags\n`DesktopPWAsLinkCapturingWithScopeExtensions` and\n`WebAppEnableScopeExtensions` are enabled.\n\nNote, the API does not support resetting the linkCapturing to the\ninitial value, uninstalling and installing the web app again will reset\nit.\n\nTODO(crbug.com/339453269): Setting this value on ChromeOS is not\nsupported yet.",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "displayMode",
+              "optional": true,
+              "$ref": "DisplayMode"
             }
           ]
         }
