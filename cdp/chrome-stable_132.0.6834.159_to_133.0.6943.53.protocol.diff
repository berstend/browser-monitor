--- ./cdp/chrome-stable_132.0.6834.159.protocol.json	2025-02-05 01:11:14.197070891 +0000
+++ ./cdp/chrome-stable_133.0.6943.53.protocol.json	2025-02-05 01:11:34.169258934 +0000
@@ -1017,11 +1017,11 @@
             {
               "name": "requestId",
               "description": "The unique request id.",
+              "optional": true,
               "$ref": "Network.RequestId"
             },
             {
               "name": "url",
-              "optional": true,
               "type": "string"
             }
           ]
@@ -1083,6 +1083,33 @@
           ]
         },
         {
+          "id": "InsightType",
+          "description": "Represents the category of insight that a cookie issue falls under.",
+          "type": "string",
+          "enum": [
+            "GitHubResource",
+            "GracePeriod",
+            "Heuristics"
+          ]
+        },
+        {
+          "id": "CookieIssueInsight",
+          "description": "Information about the suggested solution to a cookie issue.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "type",
+              "$ref": "InsightType"
+            },
+            {
+              "name": "tableEntryUrl",
+              "description": "Link to table entry in third-party cookie migration readiness list.",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        },
+        {
           "id": "CookieIssueDetails",
           "description": "This information is currently necessary, as the front-end has a difficult\ntime finding a specific cookie. With this, we can convey specific error\ninformation without the cookie.",
           "type": "object",
@@ -1131,6 +1158,12 @@
               "name": "request",
               "optional": true,
               "$ref": "AffectedRequest"
+            },
+            {
+              "name": "insight",
+              "description": "The recommended solution to the issue.",
+              "optional": true,
+              "$ref": "CookieIssueInsight"
             }
           ]
         },
@@ -1228,7 +1261,8 @@
             "CorpNotSameOriginAfterDefaultedToSameOriginByCoep",
             "CorpNotSameOriginAfterDefaultedToSameOriginByDip",
             "CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip",
-            "CorpNotSameSite"
+            "CorpNotSameSite",
+            "SRIMessageSignatureMismatch"
           ]
         },
         {
@@ -1852,6 +1886,36 @@
           ]
         },
         {
+          "id": "SelectElementAccessibilityIssueReason",
+          "type": "string",
+          "enum": [
+            "DisallowedSelectChild",
+            "DisallowedOptGroupChild",
+            "NonPhrasingContentOptionChild",
+            "InteractiveContentOptionChild",
+            "InteractiveContentLegendChild"
+          ]
+        },
+        {
+          "id": "SelectElementAccessibilityIssueDetails",
+          "description": "This isue warns about errors in the select element content model.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "nodeId",
+              "$ref": "DOM.BackendNodeId"
+            },
+            {
+              "name": "selectElementAccessibilityIssueReason",
+              "$ref": "SelectElementAccessibilityIssueReason"
+            },
+            {
+              "name": "hasDisallowedAttributes",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
           "id": "StyleSheetLoadingIssueReason",
           "type": "string",
           "enum": [
@@ -1940,7 +2004,8 @@
             "StylesheetLoadingIssue",
             "FederatedAuthUserInfoRequestIssue",
             "PropertyRuleIssue",
-            "SharedDictionaryIssue"
+            "SharedDictionaryIssue",
+            "SelectElementAccessibilityIssue"
           ]
         },
         {
@@ -2053,6 +2118,11 @@
               "name": "sharedDictionaryIssueDetails",
               "optional": true,
               "$ref": "SharedDictionaryIssueDetails"
+            },
+            {
+              "name": "selectElementAccessibilityIssueDetails",
+              "optional": true,
+              "$ref": "SelectElementAccessibilityIssueDetails"
             }
           ]
         },
@@ -2754,18 +2824,21 @@
           "experimental": true,
           "type": "string",
           "enum": [
-            "accessibilityEvents",
+            "ar",
             "audioCapture",
-            "backgroundSync",
+            "automaticFullscreen",
             "backgroundFetch",
+            "backgroundSync",
+            "cameraPanTiltZoom",
             "capturedSurfaceControl",
             "clipboardReadWrite",
             "clipboardSanitizedWrite",
             "displayCapture",
             "durableStorage",
-            "flash",
             "geolocation",
+            "handTracking",
             "idleDetection",
+            "keyboardLock",
             "localFonts",
             "midi",
             "midiSysex",
@@ -2773,16 +2846,19 @@
             "notifications",
             "paymentHandler",
             "periodicBackgroundSync",
+            "pointerLock",
             "protectedMediaIdentifier",
             "sensors",
-            "storageAccess",
+            "smartCard",
             "speakerSelection",
+            "storageAccess",
             "topLevelStorageAccess",
             "videoCapture",
-            "videoCapturePanTiltZoom",
+            "vr",
             "wakeLockScreen",
             "wakeLockSystem",
             "webAppInstallation",
+            "webPrinting",
             "windowManagement"
           ]
         },
@@ -3354,6 +3430,24 @@
           ]
         },
         {
+          "id": "CSSAnimationStyle",
+          "description": "CSS style coming from animations with the name of the animation.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "name",
+              "description": "The name of the animation.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "style",
+              "description": "The style coming from the animation.",
+              "$ref": "CSSStyle"
+            }
+          ]
+        },
+        {
           "id": "InheritedStyleEntry",
           "description": "Inherited CSS rule collection from ancestor node.",
           "type": "object",
@@ -3375,6 +3469,28 @@
           ]
         },
         {
+          "id": "InheritedAnimatedStyleEntry",
+          "description": "Inherited CSS style collection for animated styles from ancestor node.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "animationStyles",
+              "description": "Styles coming from the animations of the ancestor, if any, in the style inheritance chain.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "CSSAnimationStyle"
+              }
+            },
+            {
+              "name": "transitionsStyle",
+              "description": "The style coming from the transitions of the ancestor, if any, in the style inheritance chain.",
+              "optional": true,
+              "$ref": "CSSStyle"
+            }
+          ]
+        },
+        {
           "id": "InheritedPseudoElementMatches",
           "description": "Inherited pseudo element matches from pseudos of an ancestor node.",
           "type": "object",
@@ -4605,6 +4721,22 @@
           ]
         },
         {
+          "name": "forceStartingStyle",
+          "description": "Ensures that the given node is in its starting-style state.",
+          "parameters": [
+            {
+              "name": "nodeId",
+              "description": "The element id for which to force the starting-style state.",
+              "$ref": "DOM.NodeId"
+            },
+            {
+              "name": "forced",
+              "description": "Boolean indicating if this is on or off.",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
           "name": "getBackgroundColors",
           "parameters": [
             {
@@ -4658,6 +4790,77 @@
           ]
         },
         {
+          "name": "resolveValues",
+          "description": "Resolve the specified values in the context of the provided element.\nFor example, a value of '1em' is evaluated according to the computed\n'font-size' of the element and a value 'calc(1px + 2px)' will be\nresolved to '3px'.",
+          "parameters": [
+            {
+              "name": "values",
+              "description": "Substitution functions (var()/env()/attr()) and cascade-dependent\nkeywords (revert/revert-layer) do not work.",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
+              "name": "nodeId",
+              "description": "Id of the node in whose context the expression is evaluated",
+              "$ref": "DOM.NodeId"
+            },
+            {
+              "name": "propertyName",
+              "description": "Only longhands and custom property names are accepted.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "pseudoType",
+              "description": "Pseudo element type, only works for pseudo elements that generate\nelements in the tree, such as ::before and ::after.",
+              "experimental": true,
+              "optional": true,
+              "$ref": "DOM.PseudoType"
+            },
+            {
+              "name": "pseudoIdentifier",
+              "description": "Pseudo element custom ident.",
+              "experimental": true,
+              "optional": true,
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "results",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "name": "getLonghandProperties",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "shorthandName",
+              "type": "string"
+            },
+            {
+              "name": "value",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "longhandProperties",
+              "type": "array",
+              "items": {
+                "$ref": "CSSProperty"
+              }
+            }
+          ]
+        },
+        {
           "name": "getInlineStylesForNode",
           "description": "Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM\nattributes) for a DOM node identified by `nodeId`.",
           "parameters": [
@@ -4682,6 +4885,43 @@
           ]
         },
         {
+          "name": "getAnimatedStylesForNode",
+          "description": "Returns the styles coming from animations & transitions\nincluding the animation & transition styles coming from inheritance chain.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "nodeId",
+              "$ref": "DOM.NodeId"
+            }
+          ],
+          "returns": [
+            {
+              "name": "animationStyles",
+              "description": "Styles coming from animations.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "CSSAnimationStyle"
+              }
+            },
+            {
+              "name": "transitionsStyle",
+              "description": "Style coming from transitions.",
+              "optional": true,
+              "$ref": "CSSStyle"
+            },
+            {
+              "name": "inherited",
+              "description": "Inherited style entries for animationsStyle and transitionsStyle from\nthe inheritance chain of the element.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "InheritedAnimatedStyleEntry"
+              }
+            }
+          ]
+        },
+        {
           "name": "getMatchedStylesForNode",
           "description": "Returns requested styles for a DOM node identified by `nodeId`.",
           "parameters": [
@@ -5718,10 +5958,10 @@
           "enum": [
             "first-line",
             "first-letter",
-            "check",
+            "checkmark",
             "before",
             "after",
-            "select-arrow",
+            "picker-icon",
             "marker",
             "backdrop",
             "column",
@@ -5734,8 +5974,7 @@
             "first-line-inherited",
             "scroll-marker",
             "scroll-marker-group",
-            "scroll-next-button",
-            "scroll-prev-button",
+            "scroll-button",
             "scrollbar",
             "scrollbar-thumb",
             "scrollbar-button",
@@ -12923,7 +13162,8 @@
             "corp-not-same-origin-after-defaulted-to-same-origin-by-coep",
             "corp-not-same-origin-after-defaulted-to-same-origin-by-dip",
             "corp-not-same-origin-after-defaulted-to-same-origin-by-coep-and-dip",
-            "corp-not-same-site"
+            "corp-not-same-site",
+            "sri-message-signature-mismatch"
           ]
         },
         {
@@ -15092,6 +15332,28 @@
               "$ref": "LoadNetworkResourcePageResult"
             }
           ]
+        },
+        {
+          "name": "setCookieControls",
+          "description": "Sets Controls for third-party cookie access\nPage reload is required before the new cookie bahavior will be observed",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enableThirdPartyCookieRestriction",
+              "description": "Whether 3pc restriction is enabled.",
+              "type": "boolean"
+            },
+            {
+              "name": "disableThirdPartyCookieMetadata",
+              "description": "Whether 3pc grace period exception should be enabled; false by default.",
+              "type": "boolean"
+            },
+            {
+              "name": "disableThirdPartyCookieHeuristics",
+              "description": "Whether 3pc heuristics exceptions should be enabled; false by default.",
+              "type": "boolean"
+            }
+          ]
         }
       ],
       "events": [
@@ -15732,7 +15994,7 @@
             },
             {
               "name": "headers",
-              "description": "Raw response headers as they were received over the wire.",
+              "description": "Raw response headers as they were received over the wire.\nDuplicate headers in the response are represented as a single key with their values\nconcatentated using `\\n` as the separator.\nSee also `headersText` that contains verbatim text for HTTP/1.*.",
               "$ref": "Headers"
             },
             {
@@ -15787,7 +16049,7 @@
             },
             {
               "name": "headers",
-              "description": "Raw response headers as they were received over the wire.",
+              "description": "Raw response headers as they were received over the wire.\nDuplicate headers in the response are represented as a single key with their values\nconcatentated using `\\n` as the separator.\nSee also `headersText` that contains verbatim text for HTTP/1.*.",
               "$ref": "Headers"
             }
           ]
@@ -15813,7 +16075,8 @@
                 "BadResponse",
                 "InternalError",
                 "UnknownError",
-                "FulfilledLocally"
+                "FulfilledLocally",
+                "SiteIssuerLimit"
               ]
             },
             {
@@ -17262,6 +17525,7 @@
             "controlled-frame",
             "cross-origin-isolated",
             "deferred-fetch",
+            "deferred-fetch-minimal",
             "digital-credentials-get",
             "direct-sockets",
             "direct-sockets-private",
@@ -23787,6 +24051,20 @@
               "type": "string"
             },
             {
+              "name": "left",
+              "description": "Frame left origin in DIP (headless chrome only).",
+              "experimental": true,
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "top",
+              "description": "Frame top origin in DIP (headless chrome only).",
+              "experimental": true,
+              "optional": true,
+              "type": "integer"
+            },
+            {
               "name": "width",
               "description": "Frame width in DIP (headless chrome only).",
               "optional": true,
@@ -26314,6 +26592,11 @@
           ]
         },
         {
+          "id": "PreloadPipelineId",
+          "description": "Chrome manages different types of preloads together using a\nconcept of preloading pipeline. For example, if a site uses a\nSpeculationRules for prerender, Chrome first starts a prefetch and\nthen upgrades it to prerender.\n\nCDP events for them are emitted separately but they share\n`PreloadPipelineId`.",
+          "type": "string"
+        },
+        {
           "id": "PrerenderFinalStatus",
           "description": "List of FinalStatus reasons for Prerender2.",
           "type": "string",
@@ -26528,6 +26811,10 @@
               "$ref": "PreloadingAttemptKey"
             },
             {
+              "name": "pipelineId",
+              "$ref": "PreloadPipelineId"
+            },
+            {
               "name": "initiatingFrameId",
               "description": "The frame id of the frame initiating prefetch.",
               "$ref": "Page.FrameId"
@@ -26559,6 +26846,10 @@
               "$ref": "PreloadingAttemptKey"
             },
             {
+              "name": "pipelineId",
+              "$ref": "PreloadPipelineId"
+            },
+            {
               "name": "status",
               "$ref": "PreloadingStatus"
             },
@@ -28463,6 +28754,11 @@
               "type": "string"
             },
             {
+              "name": "buildId",
+              "description": "For Wasm modules, the content of the `build_id` custom section.",
+              "type": "string"
+            },
+            {
               "name": "executionContextAuxData",
               "description": "Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}",
               "optional": true,
@@ -28567,6 +28863,11 @@
               "type": "string"
             },
             {
+              "name": "buildId",
+              "description": "For Wasm modules, the content of the `build_id` custom section.",
+              "type": "string"
+            },
+            {
               "name": "executionContextAuxData",
               "description": "Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}",
               "optional": true,
