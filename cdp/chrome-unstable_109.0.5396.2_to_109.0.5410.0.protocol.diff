--- ./cdp/chrome-unstable_109.0.5396.2.protocol.json	2023-01-06 17:34:57.248244149 +0000
+++ ./cdp/chrome-unstable_109.0.5410.0.protocol.json	2023-01-06 17:35:21.592406358 +0000
@@ -2173,8 +2173,7 @@
           "type": "string",
           "enum": [
             "granted",
-            "denied",
-            "prompt"
+            "denied"
           ]
         },
         {
@@ -3313,6 +3312,18 @@
               "description": "Optional name for the container.",
               "optional": true,
               "type": "string"
+            },
+            {
+              "name": "physicalAxes",
+              "description": "Optional physical axes queried for the container.",
+              "optional": true,
+              "$ref": "DOM.PhysicalAxes"
+            },
+            {
+              "name": "logicalAxes",
+              "description": "Optional logical axes queried for the container.",
+              "optional": true,
+              "$ref": "DOM.LogicalAxes"
             }
           ]
         },
@@ -4690,11 +4701,11 @@
             "scrollbar-corner",
             "resizer",
             "input-list-button",
-            "page-transition",
-            "page-transition-container",
-            "page-transition-image-wrapper",
-            "page-transition-outgoing-image",
-            "page-transition-incoming-image"
+            "view-transition",
+            "view-transition-group",
+            "view-transition-image-pair",
+            "view-transition-old",
+            "view-transition-new"
           ]
         },
         {
@@ -4718,6 +4729,26 @@
           ]
         },
         {
+          "id": "PhysicalAxes",
+          "description": "ContainerSelector physical axes",
+          "type": "string",
+          "enum": [
+            "Horizontal",
+            "Vertical",
+            "Both"
+          ]
+        },
+        {
+          "id": "LogicalAxes",
+          "description": "ContainerSelector logical axes",
+          "type": "string",
+          "enum": [
+            "Inline",
+            "Block",
+            "Both"
+          ]
+        },
+        {
           "id": "Node",
           "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\nDOMNode is a base node mirror type.",
           "type": "object",
@@ -6078,7 +6109,7 @@
         },
         {
           "name": "getContainerForNode",
-          "description": "Returns the container of the given node based on container query conditions.\nIf containerName is given, it will find the nearest container with a matching name;\notherwise it will find the nearest container regardless of its container name.",
+          "description": "Returns the query container of the given node based on container query\nconditions: containerName, physical, and logical axes. If no axes are\nprovided, the style container is returned, which is the direct parent or the\nclosest element with a matching container-name.",
           "experimental": true,
           "parameters": [
             {
@@ -6089,6 +6120,16 @@
               "name": "containerName",
               "optional": true,
               "type": "string"
+            },
+            {
+              "name": "physicalAxes",
+              "optional": true,
+              "$ref": "PhysicalAxes"
+            },
+            {
+              "name": "logicalAxes",
+              "optional": true,
+              "$ref": "LogicalAxes"
             }
           ],
           "returns": [
@@ -8588,25 +8629,13 @@
         },
         {
           "name": "disable",
-          "description": "Disables headless events for the target."
+          "description": "Disables headless events for the target.",
+          "deprecated": true
         },
         {
           "name": "enable",
-          "description": "Enables headless events for the target."
-        }
-      ],
-      "events": [
-        {
-          "name": "needsBeginFramesChanged",
-          "description": "Issued when the target starts or stops needing BeginFrames.\nDeprecated. Issue beginFrame unconditionally instead and use result from\nbeginFrame to detect whether the frames were suppressed.",
-          "deprecated": true,
-          "parameters": [
-            {
-              "name": "needsBeginFrames",
-              "description": "True if BeginFrames are needed, false otherwise.",
-              "type": "boolean"
-            }
-          ]
+          "description": "Enables headless events for the target.",
+          "deprecated": true
         }
       ]
     },
@@ -13814,6 +13843,12 @@
               "description": "The client security state set for the request.",
               "optional": true,
               "$ref": "ClientSecurityState"
+            },
+            {
+              "name": "siteHasCookieInOtherPartition",
+              "description": "Whether the site has partitioned cookies stored in a partition different than the current one.",
+              "optional": true,
+              "type": "boolean"
             }
           ]
         },
@@ -19691,6 +19726,57 @@
             }
           ]
         },
+        {
+          "name": "setSharedStorageEntry",
+          "description": "Sets entry with `key` and `value` for a given origin's shared storage.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "ownerOrigin",
+              "type": "string"
+            },
+            {
+              "name": "key",
+              "type": "string"
+            },
+            {
+              "name": "value",
+              "type": "string"
+            },
+            {
+              "name": "ignoreIfPresent",
+              "description": "If `ignoreIfPresent` is included and true, then only sets the entry if\n`key` doesn't already exist.",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "deleteSharedStorageEntry",
+          "description": "Deletes entry for `key` (if it exists) for a given origin's shared storage.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "ownerOrigin",
+              "type": "string"
+            },
+            {
+              "name": "key",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "clearSharedStorageEntries",
+          "description": "Clears all entries for a given origin's shared storage.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "ownerOrigin",
+              "type": "string"
+            }
+          ]
+        },
         {
           "name": "setSharedStorageTracking",
           "description": "Enables/disables issuing of sharedStorageAccessed events.",
