--- ./cdp/chrome-unstable_116.0.5845.42.protocol.json	2023-07-22 01:06:52.810766745 +0000
+++ ./cdp/chrome-unstable_117.0.5897.3.protocol.json	2023-07-22 01:07:51.520157974 +0000
@@ -1420,7 +1420,8 @@
             "InvalidRegisterOsSourceHeader",
             "InvalidRegisterOsTriggerHeader",
             "WebAndOsHeaders",
-            "NoWebOrOsSupport"
+            "NoWebOrOsSupport",
+            "NavigationRegistrationWithoutTransientUserActivation"
           ]
         },
         {
@@ -1479,6 +1480,7 @@
         },
         {
           "id": "NavigatorUserAgentIssueDetails",
+          "deprecated": true,
           "type": "object",
           "properties": [
             {
@@ -1506,7 +1508,8 @@
             "FormInputAssignedAutocompleteValueToIdOrNameAttributeError",
             "FormLabelHasNeitherForNorNestedInput",
             "FormLabelForMatchesNonExistingIdError",
-            "FormInputHasWrongButWellIntendedAutocompleteValueError"
+            "FormInputHasWrongButWellIntendedAutocompleteValueError",
+            "ResponseWasBlockedByORB"
           ]
         },
         {
@@ -1533,6 +1536,11 @@
               "name": "violatingNodeAttribute",
               "optional": true,
               "type": "string"
+            },
+            {
+              "name": "request",
+              "optional": true,
+              "$ref": "AffectedRequest"
             }
           ]
         },
@@ -1806,6 +1814,7 @@
             },
             {
               "name": "navigatorUserAgentIssueDetails",
+              "deprecated": true,
               "optional": true,
               "$ref": "NavigatorUserAgentIssueDetails"
             },
@@ -3202,10 +3211,34 @@
               "items": {
                 "$ref": "CSSScope"
               }
+            },
+            {
+              "name": "ruleTypes",
+              "description": "The array keeps the types of ancestor CSSRules from the innermost going outwards.",
+              "experimental": true,
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "CSSRuleType"
+              }
             }
           ]
         },
         {
+          "id": "CSSRuleType",
+          "description": "Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.\nThis list only contains rule types that are collected during the ancestor rule collection.",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "MediaRule",
+            "SupportsRule",
+            "ContainerRule",
+            "LayerRule",
+            "ScopeRule",
+            "StyleRule"
+          ]
+        },
+        {
           "id": "RuleUsage",
           "description": "CSS coverage information.",
           "type": "object",
@@ -10043,6 +10076,10 @@
           ]
         },
         {
+          "name": "cancelDragging",
+          "description": "Cancels any active dragging in the page."
+        },
+        {
           "name": "emulateTouchFromMouseEvent",
           "description": "Emulates touch event from the mouse event parameters.",
           "experimental": true,
@@ -11667,7 +11704,11 @@
             "InsecurePrivateNetwork",
             "InvalidPrivateNetworkAccess",
             "UnexpectedPrivateNetworkAccess",
-            "NoCorsRedirectModeNotFollow"
+            "NoCorsRedirectModeNotFollow",
+            "PreflightMissingPrivateNetworkAccessId",
+            "PreflightMissingPrivateNetworkAccessName",
+            "PrivateNetworkAccessPermissionUnavailable",
+            "PrivateNetworkAccessPermissionDenied"
           ]
         },
         {
@@ -12611,7 +12652,8 @@
           "enum": [
             "deflate",
             "gzip",
-            "br"
+            "br",
+            "zstd"
           ]
         },
         {
@@ -13743,12 +13785,6 @@
               "name": "encodedDataLength",
               "description": "Total number of bytes received for this request.",
               "type": "number"
-            },
-            {
-              "name": "shouldReportCorbBlocking",
-              "description": "Set when 1) response was blocked by Cross-Origin Read Blocking and also\n2) this needs to be reported to the DevTools console.",
-              "optional": true,
-              "type": "boolean"
             }
           ]
         },
@@ -15706,6 +15742,7 @@
             "ch-ua-platform",
             "ch-ua-model",
             "ch-ua-mobile",
+            "ch-ua-form-factor",
             "ch-ua-full-version",
             "ch-ua-full-version-list",
             "ch-ua-platform-version",
@@ -16645,6 +16682,7 @@
             "FencedFramesEmbedder",
             "CookieDisabled",
             "HTTPAuthRequired",
+            "CookieFlushed",
             "WebSocket",
             "WebTransport",
             "WebRTC",
@@ -16656,14 +16694,12 @@
             "DocumentLoaded",
             "DedicatedWorkerOrWorklet",
             "OutstandingNetworkRequestOthers",
-            "OutstandingIndexedDBTransaction",
             "RequestedMIDIPermission",
             "RequestedAudioCapturePermission",
             "RequestedVideoCapturePermission",
             "RequestedBackForwardCacheBlockedSensors",
             "RequestedBackgroundWorkPermission",
             "BroadcastChannel",
-            "IndexedDBConnection",
             "WebXR",
             "SharedWorker",
             "WebLocks",
@@ -16825,6 +16861,13 @@
               "experimental": true,
               "optional": true,
               "type": "boolean"
+            },
+            {
+              "name": "runImmediately",
+              "description": "If true, runs the script immediately on existing execution contexts or worlds.\nDefault: false.",
+              "experimental": true,
+              "optional": true,
+              "type": "boolean"
             }
           ],
           "returns": [
@@ -19823,6 +19866,156 @@
               "$ref": "StorageBucketsDurability"
             }
           ]
+        },
+        {
+          "id": "AttributionReportingSourceType",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "navigation",
+            "event"
+          ]
+        },
+        {
+          "id": "UnsignedInt64AsBase10",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "UnsignedInt128AsBase16",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "SignedInt64AsBase10",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "AttributionReportingFilterDataEntry",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "type": "string"
+            },
+            {
+              "name": "values",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingAggregationKeysEntry",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "type": "string"
+            },
+            {
+              "name": "value",
+              "$ref": "UnsignedInt128AsBase16"
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingSourceRegistration",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "time",
+              "$ref": "Network.TimeSinceEpoch"
+            },
+            {
+              "name": "expiry",
+              "description": "duration in seconds",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "eventReportWindow",
+              "description": "duration in seconds",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "aggregatableReportWindow",
+              "description": "duration in seconds",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "type",
+              "$ref": "AttributionReportingSourceType"
+            },
+            {
+              "name": "sourceOrigin",
+              "type": "string"
+            },
+            {
+              "name": "reportingOrigin",
+              "type": "string"
+            },
+            {
+              "name": "destinationSites",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
+              "name": "eventId",
+              "$ref": "UnsignedInt64AsBase10"
+            },
+            {
+              "name": "priority",
+              "$ref": "SignedInt64AsBase10"
+            },
+            {
+              "name": "filterData",
+              "type": "array",
+              "items": {
+                "$ref": "AttributionReportingFilterDataEntry"
+              }
+            },
+            {
+              "name": "aggregationKeys",
+              "type": "array",
+              "items": {
+                "$ref": "AttributionReportingAggregationKeysEntry"
+              }
+            },
+            {
+              "name": "debugKey",
+              "optional": true,
+              "$ref": "UnsignedInt64AsBase10"
+            }
+          ]
+        },
+        {
+          "id": "AttributionReportingSourceRegistrationResult",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "success",
+            "internalError",
+            "insufficientSourceCapacity",
+            "insufficientUniqueDestinationCapacity",
+            "excessiveReportingOrigins",
+            "prohibitedByBrowserPolicy",
+            "successNoised",
+            "destinationReportingLimitReached",
+            "destinationGlobalLimitReached",
+            "destinationBothLimitsReached",
+            "reportingOriginsPerSiteLimitReached"
+          ]
         }
       ],
       "commands": [
@@ -20283,6 +20476,29 @@
               }
             }
           ]
+        },
+        {
+          "name": "setAttributionReportingLocalTestingMode",
+          "description": "https://wicg.github.io/attribution-reporting-api/",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enabled",
+              "description": "If enabled, noise is suppressed and reports are sent immediately.",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "setAttributionReportingTracking",
+          "description": "Enables/disables issuing of Attribution Reporting events.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enable",
+              "type": "boolean"
+            }
+          ]
         }
       ],
       "events": [
@@ -20455,6 +20671,21 @@
               "type": "string"
             }
           ]
+        },
+        {
+          "name": "attributionReportingSourceRegistered",
+          "description": "TODO(crbug.com/1458532): Add other Attribution Reporting events, e.g.\ntrigger registration.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "registration",
+              "$ref": "AttributionReportingSourceRegistration"
+            },
+            {
+              "name": "result",
+              "$ref": "AttributionReportingSourceRegistrationResult"
+            }
+          ]
         }
       ]
     },
@@ -22059,7 +22290,7 @@
         },
         {
           "name": "getResponseBody",
-          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.",
+          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.\nNote that the response body is not available for redirects. Requests\npaused in the _redirect received_ state may be differentiated by\n`responseCode` and presence of `location` response header, see\ncomments to `requestPaused` for details.",
           "parameters": [
             {
               "name": "requestId",
@@ -22100,7 +22331,7 @@
       "events": [
         {
           "name": "requestPaused",
-          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.",
+          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.\nRedirect responses and subsequent requests are reported similarly to regular\nresponses and requests. Redirect responses may be distinguished by the value\nof `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with\npresence of the `location` header. Requests resulting from a redirect will\nhave `redirectedRequestId` field set.",
           "parameters": [
             {
               "name": "requestId",
@@ -23514,7 +23745,8 @@
             "MemoryPressureOnTrigger",
             "MemoryPressureAfterTriggered",
             "PrerenderingDisabledByDevTools",
-            "ResourceLoadBlockedByClient"
+            "ResourceLoadBlockedByClient",
+            "SpeculationRuleRemoved"
           ]
         },
         {
@@ -23640,6 +23872,14 @@
             {
               "name": "disabledByBatterySaver",
               "type": "boolean"
+            },
+            {
+              "name": "disabledByHoldbackPrefetchSpeculationRules",
+              "type": "boolean"
+            },
+            {
+              "name": "disabledByHoldbackPrerenderSpeculationRules",
+              "type": "boolean"
             }
           ]
         },
@@ -23667,6 +23907,10 @@
             {
               "name": "prefetchStatus",
               "$ref": "PrefetchStatus"
+            },
+            {
+              "name": "requestId",
+              "$ref": "Network.RequestId"
             }
           ]
         },
@@ -23686,6 +23930,12 @@
               "name": "prerenderStatus",
               "optional": true,
               "$ref": "PrerenderFinalStatus"
+            },
+            {
+              "name": "disallowedMojoInterface",
+              "description": "This is used to give users more information about the name of Mojo interface\nthat is incompatible with prerender and has caused the cancellation of the attempt.",
+              "optional": true,
+              "type": "string"
             }
           ]
         },
@@ -26038,6 +26288,12 @@
               "description": "Deep serialization depth. Default is full depth. Respected only in `deep` serialization mode.",
               "optional": true,
               "type": "integer"
+            },
+            {
+              "name": "additionalParameters",
+              "description": "Embedder-specific parameters. For example if connected to V8 in Chrome these control DOM\nserialization via `maxNodeDepth: integer` and `includeShadowTree: \"none\" | \"open\" | \"all\"`.\nValues can be only of type string or integer.",
+              "optional": true,
+              "type": "object"
             }
           ]
         },
