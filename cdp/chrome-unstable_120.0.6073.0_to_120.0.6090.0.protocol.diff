--- ./cdp/chrome-unstable_120.0.6073.0.protocol.json	2023-10-28 00:51:52.004890960 +0000
+++ ./cdp/chrome-unstable_120.0.6090.0.protocol.json	2023-10-28 00:52:45.549484512 +0000
@@ -1011,7 +1011,8 @@
             "WarnSameSiteLaxCrossDowngradeLax",
             "WarnAttributeValueExceedsMaxSize",
             "WarnDomainNonASCII",
-            "WarnThirdPartyPhaseout"
+            "WarnThirdPartyPhaseout",
+            "WarnCrossSiteRedirectDowngradeChangesInclusion"
           ]
         },
         {
@@ -1582,6 +1583,20 @@
           ]
         },
         {
+          "id": "CookieDeprecationMetadataIssueDetails",
+          "description": "This issue warns about third-party sites that are accessing cookies on the\ncurrent page, and have been permitted due to having a global metadata grant.\nNote that in this context 'site' means eTLD+1. For example, if the URL\n`https://example.test:80/web_page` was accessing cookies, the site reported\nwould be `example.test`.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "allowedSites",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
           "id": "ClientHintIssueReason",
           "type": "string",
           "enum": [
@@ -1789,6 +1804,7 @@
             "ClientHintIssue",
             "FederatedAuthRequestIssue",
             "BounceTrackingIssue",
+            "CookieDeprecationMetadataIssue",
             "StylesheetLoadingIssue",
             "FederatedAuthUserInfoRequestIssue",
             "PropertyRuleIssue"
@@ -1881,6 +1897,11 @@
               "$ref": "BounceTrackingIssueDetails"
             },
             {
+              "name": "cookieDeprecationMetadataIssueDetails",
+              "optional": true,
+              "$ref": "CookieDeprecationMetadataIssueDetails"
+            },
+            {
               "name": "stylesheetLoadingIssueDetails",
               "optional": true,
               "$ref": "StylesheetLoadingIssueDetails"
@@ -8613,6 +8634,120 @@
           ]
         },
         {
+          "id": "SensorType",
+          "description": "Used to specify sensor types to emulate.\nSee https://w3c.github.io/sensors/#automation for more information.",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "absolute-orientation",
+            "accelerometer",
+            "ambient-light",
+            "gravity",
+            "gyroscope",
+            "linear-acceleration",
+            "magnetometer",
+            "proximity",
+            "relative-orientation"
+          ]
+        },
+        {
+          "id": "SensorMetadata",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "available",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "minimumFrequency",
+              "optional": true,
+              "type": "number"
+            },
+            {
+              "name": "maximumFrequency",
+              "optional": true,
+              "type": "number"
+            }
+          ]
+        },
+        {
+          "id": "SensorReadingSingle",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "value",
+              "type": "number"
+            }
+          ]
+        },
+        {
+          "id": "SensorReadingXYZ",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "x",
+              "type": "number"
+            },
+            {
+              "name": "y",
+              "type": "number"
+            },
+            {
+              "name": "z",
+              "type": "number"
+            }
+          ]
+        },
+        {
+          "id": "SensorReadingQuaternion",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "x",
+              "type": "number"
+            },
+            {
+              "name": "y",
+              "type": "number"
+            },
+            {
+              "name": "z",
+              "type": "number"
+            },
+            {
+              "name": "w",
+              "type": "number"
+            }
+          ]
+        },
+        {
+          "id": "SensorReading",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "single",
+              "optional": true,
+              "$ref": "SensorReadingSingle"
+            },
+            {
+              "name": "xyz",
+              "optional": true,
+              "$ref": "SensorReadingXYZ"
+            },
+            {
+              "name": "quaternion",
+              "optional": true,
+              "$ref": "SensorReadingQuaternion"
+            }
+          ]
+        },
+        {
           "id": "DisabledImageType",
           "description": "Enum of image types that can be disabled.",
           "experimental": true,
@@ -8895,6 +9030,57 @@
           ]
         },
         {
+          "name": "getOverriddenSensorInformation",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "type",
+              "$ref": "SensorType"
+            }
+          ],
+          "returns": [
+            {
+              "name": "requestedSamplingFrequency",
+              "type": "number"
+            }
+          ]
+        },
+        {
+          "name": "setSensorOverrideEnabled",
+          "description": "Overrides a platform sensor of a given type. If |enabled| is true, calls to\nSensor.start() will use a virtual sensor as backend rather than fetching\ndata from a real hardware sensor. Otherwise, existing virtual\nsensor-backend Sensor objects will fire an error event and new calls to\nSensor.start() will attempt to use a real sensor instead.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "enabled",
+              "type": "boolean"
+            },
+            {
+              "name": "type",
+              "$ref": "SensorType"
+            },
+            {
+              "name": "metadata",
+              "optional": true,
+              "$ref": "SensorMetadata"
+            }
+          ]
+        },
+        {
+          "name": "setSensorOverrideReadings",
+          "description": "Updates the sensor readings reported by a sensor type previously overriden\nby setSensorOverrideEnabled.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "type",
+              "$ref": "SensorType"
+            },
+            {
+              "name": "reading",
+              "$ref": "SensorReading"
+            }
+          ]
+        },
+        {
           "name": "setIdleOverride",
           "description": "Overrides the Idle state.",
           "experimental": true,
@@ -17051,6 +17237,35 @@
           ]
         },
         {
+          "id": "BackForwardCacheBlockingDetails",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "url",
+              "description": "Url of the file where blockage happened. Optional because of tests.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "function",
+              "description": "Function name where blockage happened. Optional because of anonymous functions and tests.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "lineNumber",
+              "description": "Line number in the script (0-based).",
+              "type": "integer"
+            },
+            {
+              "name": "columnNumber",
+              "description": "Column number in the script (0-based).",
+              "type": "integer"
+            }
+          ]
+        },
+        {
           "id": "BackForwardCacheNotRestoredExplanation",
           "experimental": true,
           "type": "object",
@@ -17070,6 +17285,14 @@
               "description": "Context associated with the reason. The meaning of this context is\ndependent on the reason:\n- EmbedderExtensionSentMessageToCachedFrame: the extension ID.",
               "optional": true,
               "type": "string"
+            },
+            {
+              "name": "details",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "BackForwardCacheBlockingDetails"
+              }
             }
           ]
         },
@@ -20237,6 +20460,15 @@
           ]
         },
         {
+          "id": "AttributionReportingTriggerDataMatching",
+          "experimental": true,
+          "type": "string",
+          "enum": [
+            "exact",
+            "modulus"
+          ]
+        },
+        {
           "id": "AttributionReportingSourceRegistration",
           "experimental": true,
           "type": "object",
@@ -20304,6 +20536,10 @@
               "name": "debugKey",
               "optional": true,
               "$ref": "UnsignedInt64AsBase10"
+            },
+            {
+              "name": "triggerDataMatching",
+              "$ref": "AttributionReportingTriggerDataMatching"
             }
           ]
         },
