--- ./cdp/chrome-unstable_136.0.7091.2.protocol.json	2025-04-05 01:15:56.155157447 +0000
+++ ./cdp/chrome-unstable_137.0.7106.2.protocol.json	2025-04-05 01:16:25.659524762 +0000
@@ -1583,7 +1583,8 @@
             "SignatureInputHeaderMissingRequiredParameters",
             "ValidationFailedSignatureExpired",
             "ValidationFailedInvalidLength",
-            "ValidationFailedSignatureMismatch"
+            "ValidationFailedSignatureMismatch",
+            "ValidationFailedIntegrityMismatch"
           ]
         },
         {
@@ -1683,6 +1684,13 @@
               "type": "string"
             },
             {
+              "name": "integrityAssertions",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
               "name": "request",
               "$ref": "AffectedRequest"
             }
@@ -1867,7 +1875,8 @@
             "RelyingPartyOriginIsOpaque",
             "TypeNotMatching",
             "UiDismissedNoEmbargo",
-            "CorsError"
+            "CorsError",
+            "SuppressedBySegmentationPlatform"
           ]
         },
         {
@@ -5038,7 +5047,8 @@
         },
         {
           "name": "resolveValues",
-          "description": "Resolve the specified values in the context of the provided element.\nFor example, a value of '1em' is evaluated according to the computed\n'font-size' of the element and a value 'calc(1px + 2px)' will be\nresolved to '3px'.",
+          "description": "Resolve the specified values in the context of the provided element.\nFor example, a value of '1em' is evaluated according to the computed\n'font-size' of the element and a value 'calc(1px + 2px)' will be\nresolved to '3px'.\nIf the `propertyName` was specified the `values` are resolved as if\nthey were property's declaration. If a value cannot be parsed according\nto the provided property syntax, the value is parsed using combined\nsyntax as if null `propertyName` was provided. If the value cannot be\nresolved even then, return the provided value without any changes.",
+          "experimental": true,
           "parameters": [
             {
               "name": "values",
@@ -5062,14 +5072,12 @@
             {
               "name": "pseudoType",
               "description": "Pseudo element type, only works for pseudo elements that generate\nelements in the tree, such as ::before and ::after.",
-              "experimental": true,
               "optional": true,
               "$ref": "DOM.PseudoType"
             },
             {
               "name": "pseudoIdentifier",
               "description": "Pseudo element custom ident.",
-              "experimental": true,
               "optional": true,
               "type": "string"
             }
@@ -14022,7 +14030,8 @@
             "SamePartyFromCrossPartyContext",
             "NameValuePairExceedsMaxSize",
             "PortMismatch",
-            "SchemeMismatch"
+            "SchemeMismatch",
+            "AnonymousContext"
           ]
         },
         {
@@ -22299,31 +22308,36 @@
           ]
         },
         {
-          "id": "SharedStorageAccessType",
-          "description": "Enum of shared storage access types.",
+          "id": "SharedStorageAccessScope",
+          "description": "Enum of shared storage access scopes.",
           "type": "string",
           "enum": [
-            "documentAddModule",
-            "documentSelectURL",
-            "documentRun",
-            "documentSet",
-            "documentAppend",
-            "documentDelete",
-            "documentClear",
-            "documentGet",
-            "workletSet",
-            "workletAppend",
-            "workletDelete",
-            "workletClear",
-            "workletGet",
-            "workletKeys",
-            "workletEntries",
-            "workletLength",
-            "workletRemainingBudget",
-            "headerSet",
-            "headerAppend",
-            "headerDelete",
-            "headerClear"
+            "window",
+            "sharedStorageWorklet",
+            "protectedAudienceWorklet",
+            "header"
+          ]
+        },
+        {
+          "id": "SharedStorageAccessMethod",
+          "description": "Enum of shared storage access methods.",
+          "type": "string",
+          "enum": [
+            "addModule",
+            "createWorklet",
+            "selectURL",
+            "run",
+            "batchUpdate",
+            "set",
+            "append",
+            "delete",
+            "clear",
+            "get",
+            "keys",
+            "values",
+            "entries",
+            "length",
+            "remainingBudget"
           ]
         },
         {
@@ -23874,9 +23888,14 @@
               "$ref": "Network.TimeSinceEpoch"
             },
             {
-              "name": "type",
+              "name": "scope",
+              "description": "Enum value indicating the access scope.",
+              "$ref": "SharedStorageAccessScope"
+            },
+            {
+              "name": "method",
               "description": "Enum value indicating the Shared Storage API method invoked.",
-              "$ref": "SharedStorageAccessType"
+              "$ref": "SharedStorageAccessMethod"
             },
             {
               "name": "mainFrameId",
@@ -23885,7 +23904,12 @@
             },
             {
               "name": "ownerOrigin",
-              "description": "Serialized origin for the context that invoked the Shared Storage API.",
+              "description": "Serialization of the origin owning the Shared Storage data.",
+              "type": "string"
+            },
+            {
+              "name": "ownerSite",
+              "description": "Serialization of the site owning the Shared Storage data.",
               "type": "string"
             },
             {
@@ -24605,6 +24629,13 @@
               "experimental": true,
               "optional": true,
               "type": "boolean"
+            },
+            {
+              "name": "hidden",
+              "description": "Whether to create a hidden target. The hidden target is observable via protocol, but not\npresent in the tab UI strip. Cannot be created with `forTab: true`, `newWindow: true` or\n`background: false`. The life-time of the tab is limited to the life-time of the session.",
+              "experimental": true,
+              "optional": true,
+              "type": "boolean"
             }
           ],
           "returns": [
@@ -27898,6 +27929,53 @@
               "$ref": "ScanRecord"
             }
           ]
+        },
+        {
+          "id": "CharacteristicProperties",
+          "description": "Describes the properties of a characteristic. This follows Bluetooth Core\nSpecification BT 4.2 Vol 3 Part G 3.3.1. Characteristic Properties.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "broadcast",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "read",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "writeWithoutResponse",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "write",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "notify",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "indicate",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "authenticatedSignedWrites",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "extendedProperties",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
         }
       ],
       "commands": [
@@ -27987,6 +28065,139 @@
               "type": "integer"
             }
           ]
+        },
+        {
+          "name": "addService",
+          "description": "Adds a service with |serviceUuid| to the peripheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceUuid",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "serviceId",
+              "description": "An identifier that uniquely represents this service.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeService",
+          "description": "Removes the service respresented by |serviceId| from the peripheral with\n|address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "addCharacteristic",
+          "description": "Adds a characteristic with |characteristicUuid| and |properties| to the\nservice represented by |serviceId| in the peripheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceId",
+              "type": "string"
+            },
+            {
+              "name": "characteristicUuid",
+              "type": "string"
+            },
+            {
+              "name": "properties",
+              "$ref": "CharacteristicProperties"
+            }
+          ],
+          "returns": [
+            {
+              "name": "characteristicId",
+              "description": "An identifier that uniquely represents this characteristic.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeCharacteristic",
+          "description": "Removes the characteristic respresented by |characteristicId| from the\nservice respresented by |serviceId| in the peripheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceId",
+              "type": "string"
+            },
+            {
+              "name": "characteristicId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "addDescriptor",
+          "description": "Adds a descriptor with |descriptorUuid| to the characteristic respresented\nby |characteristicId| in the service represented by |serviceId| of the\nperipheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceId",
+              "type": "string"
+            },
+            {
+              "name": "characteristicId",
+              "type": "string"
+            },
+            {
+              "name": "descriptorUuid",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "descriptorId",
+              "description": "An identifier that uniquely represents this descriptor.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeDescriptor",
+          "description": "Removes the descriptor with |descriptorId| from the characteristic\nrespresented by |characteristicId| in the service represented by |serviceId|\nof the peripheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceId",
+              "type": "string"
+            },
+            {
+              "name": "characteristicId",
+              "type": "string"
+            },
+            {
+              "name": "descriptorId",
+              "type": "string"
+            }
+          ]
         }
       ],
       "events": [
